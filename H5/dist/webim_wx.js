/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./webim_wx.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./webim_wx.js":
/*!*********************!*\
  !*** ./webim_wx.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* webim javascript SDK (for wechat miniProgram )\n * VER 1.7.2\n */\nmodule.exports = function () {\n\n    if (typeof Array.prototype.forEach != 'function') {\n        Array.prototype.forEach = function (callback) {\n            for (var i = 0; i < this.length; i++) {\n                callback.apply(this, [this[i], i, this]);\n            }\n        };\n    }\n    /* webim javascript SDK\n     * VER 1.7.2\n     */\n\n    /* webim API definitions\n     */\n    var msgCache = {};\n    var webim = { // namespace object webim\n\n        /* function init\n         *   sdk登录\n         * params:\n         *   loginInfo      - Object, 登录身份相关参数集合，详见下面\n         *   {\n         *     sdkAppID     - String, 用户标识接入SDK的应用ID，必填\n         *     accountType  - int, 账号类型，必填\n         *     identifier   - String, 用户帐号,必须是字符串类型，必填\n         *     identifierNick   - String, 用户昵称，选填\n         *     userSig      - String, 鉴权Token，必须是字符串类型，必填\n         *   }\n         *   listeners      - Object, 事件回调函数集合, 详见下面\n         *   {\n         *     onConnNotify - function(connInfo), 用于收到连接状态相关通知的回调函数,目前未使用\n         *     onMsgNotify  - function(newMsgList), 用于收到消息通知的回调函数,\n         *      newMsgList为新消息数组，格式为[Msg对象]\n         *      使用方有两种处理回调: 1)处理newMsgList中的增量消息,2)直接访问webim.MsgStore获取最新的消息\n         *     onGroupInfoChangeNotify  - function(groupInfo), 用于监听群组资料变更的回调函数,\n         *          groupInfo为新的群组资料信息\n         *     onGroupSystemNotifys - Object, 用于监听（多终端同步）群系统消息的回调函数对象\n         *\n         *   }\n         *   options        - Object, 其它选项, 目前未使用\n         * return:\n         *   (无)\n         */\n        login: function (loginInfo, listeners, options) {},\n\n        /* function syncMsgs\n         *   拉取最新C2C消息\n         *   一般不需要使用方直接调用, SDK底层会自动同步最新消息并通知使用方, 一种有用的调用场景是用户手动触发刷新消息\n         * params:\n         *   cbOk   - function(msgList)类型, 当同步消息成功时的回调函数, msgList为新消息数组，格式为[Msg对象],\n         *            如果此参数为null或undefined则同步消息成功后会像自动同步那样回调cbNotify\n         *   cbErr  - function(err)类型, 当同步消息失败时的回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        syncMsgs: function (cbOk, cbErr) {},\n\n\n        /* function getC2CHistoryMsgs\n         * 拉取C2C漫游消息\n         * params:\n         *   options    - 请求参数\n         *   cbOk   - function(msgList)类型, 成功时的回调函数, msgList为消息数组，格式为[Msg对象],\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getC2CHistoryMsgs: function (options, cbOk, cbErr) {},\n\n        /* function syncGroupMsgs\n         * 拉取群漫游消息\n         * params:\n         *   options    - 请求参数\n         *   cbOk   - function(msgList)类型, 成功时的回调函数, msgList为消息数组，格式为[Msg对象],\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        syncGroupMsgs: function (options, cbOk, cbErr) {},\n\n        /* function sendMsg\n         *   发送一条消息\n         * params:\n         *   msg    - webim.Msg类型, 要发送的消息对象\n         *   cbOk   - function()类型, 当发送消息成功时的回调函数\n         *   cbErr  - function(err)类型, 当发送消息失败时的回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        sendMsg: function (msg, cbOk, cbErr) {},\n\n        /* function logout\n         *   sdk登出\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        logout: function (cbOk, cbErr) {},\n\n        /* function setAutoRead\n         * 设置会话自动已读上报标志\n         * params:\n         *   selSess    - webim.Session类型, 当前会话\n         *   isOn   - boolean, 将selSess的自动已读消息标志改为isOn，同时是否上报当前会话已读消息\n         *   isResetAll - boolean，是否重置所有会话的自动已读标志\n         * return:\n         *   (无)\n         */\n        setAutoRead: function (selSess, isOn, isResetAll) {},\n\n        /* function getProfilePortrait\n         *   拉取资料（搜索用户）\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getProfilePortrait: function (options, cbOk, cbErr) {},\n\n        /* function setProfilePortrait\n         *   设置个人资料\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        setProfilePortrait: function (options, cbOk, cbErr) {},\n\n        /* function applyAddFriend\n         *   申请添加好友\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        applyAddFriend: function (options, cbOk, cbErr) {},\n\n        /* function getPendency\n         *   拉取好友申请\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getPendency: function (options, cbOk, cbErr) {},\n\n        /* function deletePendency\n         *   删除好友申请\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        deletePendency: function (options, cbOk, cbErr) {},\n\n        /* function responseFriend\n         *   响应好友申请\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        responseFriend: function (options, cbOk, cbErr) {},\n\n        /* function getAllFriend\n         *   拉取我的好友\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getAllFriend: function (options, cbOk, cbErr) {},\n\n        /* function deleteFriend\n         *   删除好友\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        deleteFriend: function (options, cbOk, cbErr) {},\n\n        /* function addBlackList\n         *   增加黑名单\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        addBlackList: function (options, cbOk, cbErr) {},\n\n        /* function getBlackList\n         *   删除黑名单\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getBlackList: function (options, cbOk, cbErr) {},\n\n        /* function deleteBlackList\n         *   我的黑名单\n         * params:\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        deleteBlackList: function (options, cbOk, cbErr) {},\n\n        /* function uploadPic\n         *   上传图片\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        uploadPic: function (options, cbOk, cbErr) {},\n\n        /* function createGroup\n         *   创建群\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        createGroup: function (options, cbOk, cbErr) {},\n\n        /* function applyJoinGroup\n         *   申请加群\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        applyJoinGroup: function (options, cbOk, cbErr) {},\n\n        /* function handleApplyJoinGroup\n         *   处理申请加群(同意或拒绝)\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        handleApplyJoinGroup: function (options, cbOk, cbErr) {},\n\n        /* function deleteApplyJoinGroupPendency\n         *   删除加群申请\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        deleteApplyJoinGroupPendency: function (options, cbOk, cbErr) {},\n\n\n        /* function quitGroup\n         *  主动退群\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        quitGroup: function (options, cbOk, cbErr) {},\n\n        /* function getGroupPublicInfo\n         *   读取群公开资料-高级接口\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getGroupPublicInfo: function (options, cbOk, cbErr) {},\n\n        /* function getGroupInfo\n         *   读取群详细资料-高级接口\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getGroupInfo: function (options, cbOk, cbErr) {},\n\n        /* function modifyGroupBaseInfo\n         *   修改群基本资料\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        modifyGroupBaseInfo: function (options, cbOk, cbErr) {},\n\n        /* function destroyGroup\n         *  解散群\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        destroyGroup: function (options, cbOk, cbErr) {},\n\n        /* function getJoinedGroupListHigh\n         *   获取我的群组-高级接口\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getJoinedGroupListHigh: function (options, cbOk, cbErr) {},\n\n        /* function getGroupMemberInfo\n         *   获取群组成员列表\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getGroupMemberInfo: function (options, cbOk, cbErr) {},\n\n        /* function addGroupMember\n         *   邀请好友加群\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        addGroupMember: function (options, cbOk, cbErr) {},\n\n        /* function modifyGroupMember\n         *   修改群成员资料（角色或者群消息提类型示）\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        modifyGroupMember: function (options, cbOk, cbErr) {},\n\n        /* function forbidSendMsg\n         *   设置群成员禁言时间\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        forbidSendMsg: function (options, cbOk, cbErr) {},\n\n        /* function deleteGroupMember\n         *   删除群成员\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        deleteGroupMember: function (options, cbOk, cbErr) {},\n\n        /* function getPendencyGroup\n         *   获取群组未决列表\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getPendencyGroup: function (options, cbOk, cbErr) {},\n\n        /* function getPendencyReport\n         *   好友未决已读上报\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getPendencyReport: function (options, cbOk, cbErr) {},\n\n        /* function getPendencyGroupRead\n         *   群组未决已读上报\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        getPendencyGroupRead: function (options, cbOk, cbErr) {},\n\n        /* function sendCustomGroupNotify\n         *   发送自定义群通知\n         * params:\n         *   options    - 请求参数，详见api文档\n         *   cbOk   - function()类型, 成功时回调函数\n         *   cbErr  - function(err)类型, 失败时回调函数, err为错误对象\n         * return:\n         *   (无)\n         */\n        sendCustomGroupNotify: function (options, cbOk, cbErr) {},\n\n        /* class webim.Msg\n         *   一条消息的描述类, 消息发送、接收的API中都会涉及此类型的对象\n         * properties:\n         *   sess   - Session object-ref, 消息所属的会话(e.g:我与好友A的C2C会话，我与群组G的GROUP会话)\n         *   isSend - Boolean, true表示是我发出消息, false表示是发给我的消息)\n         *   seq    - Integer, 消息序列号, 用于判断消息是否同一条\n         *   random - Integer, 消息随机数,用于判断消息是否同一条\n         *   time   - Integer, 消息时间戳, 为unix timestamp\n         *   fromAccount -String,  消息发送者帐号\n         *   subType -Integer,  消息子类型，c2c消息时，0-表示普通消息；群消息时，0-普通消息，1-点赞消息，2-提示消息\n         *   fromAccountNick -String,  消息发送者昵称\n         *   elems  - Array of webim.Msg.Elem, 描述消息内容的元素列表\n         * constructor:\n         *   Msg(sess, isSend, seq,random time,fromAccount) - 构造函数, 参数定义同上面properties中定义\n         * methods:\n         *   addText(text)  - 向elems中添加一个TEXT元素\n         *   addFace(face)  - 向elems中添加一个FACE元素\n         *   toHtml()       - 转成可展示的html String\n         *addFace\n         * sub-class webim.Msg.Elem\n         *   消息中一个组成元素的描述类, 一条消息的内容被抽象描述为N个元素的有序列表\n         * properties:\n         *   type   - 元素类型, 目前有TEXT(文本)、FACE(表情)、IMAGE(图片)等\n         *   content- 元素内容体, 当TEXT时为String, 当PIC时为UrlString\n         * constructor:\n         *   Elem(type, content) - 构造函数, 参数定义同上面properties中定义\n         *\n         * sub-class webim.Msg.Elem.TextElem\n         *   文本\n         * properties:\n         *   text  - String 内容\n         * constructor:\n         *   TextElem(text) - 构造函数, 参数定义同上面properties中定义\n         *\n         * sub-class webim.Msg.Elem.FaceElem\n         *   表情\n         * properties:\n         *   index  - Integer 表情索引, 用户自定义\n         *   data   - String 额外数据，用户自定义\n         * constructor:\n         *   FaceElem(index,data) - 构造函数, 参数定义同上面properties中定义\n         *\n         *\n         */\n        Msg: function (sess, isSend, seq, random, time, fromAccount, subType, fromAccountNick, fromAccountHeadurl) { /*Class constructor*/ },\n\n        /* singleton object MsgStore\n         * webim.MsgStore是消息数据的Model对象(参考MVC概念), 它提供接口访问当前存储的会话和消息数据\n         * 下面说明下会话数据类型: Session\n         *\n         * class Session\n         *   一个Session对象描述一个会话，会话可简单理解为最近会话列表的一个条目，它由两个字段唯一标识:\n         *     type - String, 会话类型(如\"C2C\", \"GROUP\", ...)\n         *     id   - String, 会话ID(如C2C类型中为对方帐号,\"C2C\"时为好友ID,\"GROUP\"时为群ID)\n         * properties:\n         *   (Session对象未对外暴露任何属性字段, 所有访问通过下面的getter方法进行)\n         * methods:\n         *   type()     - String, 返回会话类型,\"C2C\"表示与好友私聊，\"GROUP\"表示群聊\n         *   id()       - String, 返回会话ID\n         *   name()     - String, 返回会话标题(如C2C类型中为对方的昵称,暂不支持)\n         *   icon()     - String, 返回会话图标(对C2C类型中为对方的头像URL，暂不支持)\n         *   unread()           - Integer, 返回会话未读条数\n         *   time()     - Integer, 返回会话最后活跃时间, 为unix timestamp\n         *   curMaxMsgSeq() - Integer, 返回会话最大消息序列号\n         *   msgCount() - Integer, 返回会话中所有消息条数\n         *   msg(index) - webim.Msg, 返回会话中第index条消息\n         */\n        MsgStore: {\n            /* function sessMap\n             *   获取所有会话\n             * return:\n             *   所有会话对象\n             */\n            sessMap: function () {\n                return { /*Object*/ };\n            },\n            /* function sessCount\n             *   获取当前会话的个数\n             * return:\n             *   Integer, 会话个数\n             */\n            sessCount: function () {\n                return 0;\n            },\n\n            /* function sessByTypeId\n             *   根据会话类型和会话ID取得相应会话\n             * params:\n             *   type   - String, 会话类型(如\"C2C\", \"GROUP\", ...)\n             *   id     - String, 会话ID(如对方ID)\n             * return:\n             *   Session, 会话对象(说明见上面)\n             */\n            sessByTypeId: function (type, id) {\n                return { /*Session Object*/ };\n            },\n            /* function delSessByTypeId\n             *   根据会话类型和会话ID删除相应会话\n             * params:\n             *   type   - String, 会话类型(如\"C2C\", \"GROUP\", ...)\n             *   id     - String, 会话ID(如对方ID)\n             * return:\n             *   Boolean, 布尔类型\n             */\n            delSessByTypeId: function (type, id) {\n                return true;\n            },\n\n            /* function resetCookieAndSyncFlag\n             *   重置上一次读取新c2c消息Cookie和是否继续拉取标记\n             * return:\n             *\n             */\n            resetCookieAndSyncFlag: function () {},\n\n            downloadMap: {}\n        }\n\n    };\n\n    /* webim API implementation\n     */\n    (function (webim) {\n        //sdk版本\n        var SDK = {\n            'VERSION': '1.7.2', //sdk版本号\n            'APPID': '537048168', //web im sdk 版本 APPID\n            'PLAATFORM': \"10\" //发送请求时判断其是来自web端的请求\n        };\n\n        //是否启用正式环境，默认启用\n        var isAccessFormaEnvironment = true;\n        // 是否需要进行XSS Filter\n        var xssFilterEnable = true;\n\n        //后台接口主机\n        var SRV_HOST = {\n            'FORMAL': {\n                'COMMON': 'https://webim.tim.qq.com',\n                'PIC': 'https://pic.tim.qq.com'\n            },\n            'TEST': {\n                'COMMON': 'https://test.tim.qq.com',\n                'PIC': 'https://pic.tim.qq.com'\n            }\n        };\n\n        //浏览器版本信息\n        var BROWSER_INFO = {};\n        //是否为ie9（含）以下\n        var lowerBR = false;\n\n        //服务名称\n        var SRV_NAME = {\n            'OPEN_IM': 'openim', //私聊（拉取未读c2c消息，长轮询，c2c消息已读上报等）服务名\n            'GROUP': 'group_open_http_svc', //群组管理（拉取群消息，创建群，群成员管理，群消息已读上报等）服务名\n            'FRIEND': 'sns', //关系链管理（好友管理，黑名单管理等）服务名\n            'PROFILE': 'profile', //资料管理（查询，设置个人资料等）服务名\n            'RECENT_CONTACT': 'recentcontact', //最近联系人服务名\n            'PIC': 'openpic', //图片（或文件）服务名\n            'BIG_GROUP': 'group_open_http_noauth_svc', //直播大群 群组管理（申请加大群）服务名\n            'BIG_GROUP_LONG_POLLING': 'group_open_long_polling_http_noauth_svc', //直播大群 长轮询（拉取消息等）服务名\n            'IM_OPEN_STAT': 'imopenstat', //质量上报，统计接口错误率\n            'DEL_CHAT': 'recentcontact', //删除会话\n            'WEB_IM': 'webim'\n        };\n\n        //不同服务对应的版本号\n        var SRV_NAME_VER = {\n            'openim': 'v4',\n            'group_open_http_svc': 'v4',\n            'sns': 'v4',\n            'profile': 'v4',\n            'recentcontact': 'v4',\n            'openpic': 'v4',\n            'group_open_http_noauth_svc': 'v1',\n            'group_open_long_polling_http_noauth_svc': 'v1',\n            'imopenstat': 'v4',\n            'webim': 'v3'\n        };\n\n        //不同的命令名对应的上报类型ID，用于接口质量上报\n        var CMD_EVENT_ID_MAP = {\n            'login': 1, //登录\n            'pic_up': 3, //上传图片\n            'apply_join_group': 9, //申请加入群组\n            'create_group': 10, //创建群组\n            'longpolling': 18, //普通长轮询\n            'send_group_msg': 19, //群聊\n            'sendmsg': 20 //私聊\n        };\n\n        //聊天类型\n        var SESSION_TYPE = {\n            'C2C': 'C2C', //私聊\n            'GROUP': 'GROUP' //群聊\n        };\n\n        //最近联系人类型\n        var RECENT_CONTACT_TYPE = {\n            'C2C': 1, //好友\n            'GROUP': 2 //群\n        };\n\n        //消息最大长度（字节）\n        var MSG_MAX_LENGTH = {\n            'C2C': 12000, //私聊消息\n            'GROUP': 8898 //群聊\n        };\n\n        //后台接口返回类型\n        var ACTION_STATUS = {\n            'OK': 'OK', //成功\n            'FAIL': 'FAIL' //失败\n        };\n\n        var ERROR_CODE_CUSTOM = 99999; //自定义后台接口返回错误码\n\n        //消息元素类型\n        var MSG_ELEMENT_TYPE = {\n            'TEXT': 'TIMTextElem', //文本\n            'FACE': 'TIMFaceElem', //表情\n            'IMAGE': 'TIMImageElem', //图片\n            'CUSTOM': 'TIMCustomElem', //自定义\n            'SOUND': 'TIMSoundElem', //语音,只支持显示\n            'FILE': 'TIMFileElem', //文件,只支持显示\n            'LOCATION': 'TIMLocationElem', //地理位置\n            'GROUP_TIP': 'TIMGroupTipElem' //群提示消息,只支持显示\n        };\n\n        //图片类型\n        var IMAGE_TYPE = {\n            'ORIGIN': 1, //原图\n            'LARGE': 2, //缩略大图\n            'SMALL': 3 //缩略小图\n        };\n\n        //图片格式\n        var IMAGE_FORMAT = {\n            JPG: 0x1,\n            JPEG: 0x1,\n            GIF: 0x2,\n            PNG: 0x3,\n            BMP: 0x4,\n            UNKNOWN: 0xff\n        };\n\n\n        //上传资源包类型\n        var UPLOAD_RES_PKG_FLAG = {\n            'RAW_DATA': 0, //原始数据\n            'BASE64_DATA': 1 //base64编码数据\n        };\n\n        //下载文件配置\n        var DOWNLOAD_FILE = {\n            'BUSSINESS_ID': '10001', //下载文件业务ID\n            'AUTH_KEY': '617574686b6579', //下载文件authkey\n            'SERVER_IP': '182.140.186.147', //下载文件服务器IP\n            'SOUND_SERVER_DOMAIN': 'grouptalk.c2c.qq.com'\n        };\n\n        //下载文件类型\n        var DOWNLOAD_FILE_TYPE = {\n            \"SOUND\": 2106, //语音\n            \"FILE\": 2107 //普通文件\n        };\n\n        //上传资源类型\n        var UPLOAD_RES_TYPE = {\n            \"IMAGE\": 1, //图片\n            \"FILE\": 2, //文件\n            \"SHORT_VIDEO\": 3, //短视频\n            \"SOUND\": 4 //语音，PTT\n        };\n\n        //版本号，用于上传图片或文件接口\n        var VERSION_INFO = {\n            'APP_VERSION': '2.1', //应用版本号\n            'SERVER_VERSION': 1 //服务端版本号\n        };\n\n        //长轮询消息类型\n        var LONG_POLLINNG_EVENT_TYPE = {\n            \"C2C\": 1 //新的c2c消息通知\n                ,\n            \"GROUP_COMMON\": 3 //新的群普通消息\n                ,\n            \"GROUP_TIP\": 4 //新的群提示消息\n                ,\n            \"GROUP_SYSTEM\": 5 //新的群系统消息\n                ,\n            \"GROUP_TIP2\": 6 //新的群提示消息2\n                ,\n            \"FRIEND_NOTICE\": 7 //好友系统通知\n                ,\n            \"PROFILE_NOTICE\": 8 //资料系统通知\n                ,\n            \"C2C_COMMON\": 9 //新的C2C消息\n                ,\n            \"C2C_EVENT\": 10\n        };\n\n        //c2c消息子类型\n        var C2C_MSG_SUB_TYPE = {\n            \"COMMON\": 0 //普通消息\n        };\n        //c2c消息子类型\n        var C2C_EVENT_SUB_TYPE = {\n            \"READED\": 92, //已读消息同步\n            \"KICKEDOUT\": 96\n        };\n\n        //群消息子类型\n        var GROUP_MSG_SUB_TYPE = {\n            \"COMMON\": 0, //普通消息\n            \"LOVEMSG\": 1, //点赞消息\n            \"TIP\": 2, //提示消息\n            \"REDPACKET\": 3 //红包消息\n        };\n\n        //群消息优先级类型\n        var GROUP_MSG_PRIORITY_TYPE = {\n            \"REDPACKET\": 1, //红包消息\n            \"COMMON\": 2, //普通消息\n            \"LOVEMSG\": 3 //点赞消息\n        };\n\n        //群提示消息类型\n        var GROUP_TIP_TYPE = {\n            \"JOIN\": 1, //加入群组\n            \"QUIT\": 2, //退出群组\n            \"KICK\": 3, //被踢出群组\n            \"SET_ADMIN\": 4, //被设置为管理员\n            \"CANCEL_ADMIN\": 5, //被取消管理员\n            \"MODIFY_GROUP_INFO\": 6, //修改群资料\n            \"MODIFY_MEMBER_INFO\": 7 //修改群成员信息\n        };\n\n        //群提示消息-群资料变更类型\n        var GROUP_TIP_MODIFY_GROUP_INFO_TYPE = {\n            \"FACE_URL\": 1, //修改群头像URL\n            \"NAME\": 2, //修改群名称\n            \"OWNER\": 3, //修改群主\n            \"NOTIFICATION\": 4, //修改群公告\n            \"INTRODUCTION\": 5 //修改群简介\n        };\n\n        //群系统消息类型\n        var GROUP_SYSTEM_TYPE = {\n            \"JOIN_GROUP_REQUEST\": 1, //申请加群请求（只有管理员会收到）\n            \"JOIN_GROUP_ACCEPT\": 2, //申请加群被同意（只有申请人能够收到）\n            \"JOIN_GROUP_REFUSE\": 3, //申请加群被拒绝（只有申请人能够收到）\n            \"KICK\": 4, //被管理员踢出群(只有被踢者接收到)\n            \"DESTORY\": 5, //群被解散(全员接收)\n            \"CREATE\": 6, //创建群(创建者接收, 不展示)\n            \"INVITED_JOIN_GROUP_REQUEST\": 7, //邀请加群(被邀请者接收)\n            \"QUIT\": 8, //主动退群(主动退出者接收, 不展示)\n            \"SET_ADMIN\": 9, //设置管理员(被设置者接收)\n            \"CANCEL_ADMIN\": 10, //取消管理员(被取消者接收)\n            \"REVOKE\": 11, //群已被回收(全员接收, 不展示)\n            \"READED\": 15, //群消息已读同步\n            \"CUSTOM\": 255, //用户自定义通知(默认全员接收)\n            \"INVITED_JOIN_GROUP_REQUEST_AGREE\": 12, //邀请加群(被邀请者需同意)\n        };\n\n        //好友系统通知子类型\n        var FRIEND_NOTICE_TYPE = {\n            \"FRIEND_ADD\": 1, //好友表增加\n            \"FRIEND_DELETE\": 2, //好友表删除\n            \"PENDENCY_ADD\": 3, //未决增加\n            \"PENDENCY_DELETE\": 4, //未决删除\n            \"BLACK_LIST_ADD\": 5, //黑名单增加\n            \"BLACK_LIST_DELETE\": 6, //黑名单删除\n            \"PENDENCY_REPORT\": 7, //未决已读上报\n            \"FRIEND_UPDATE\": 8 //好友数据更新\n        };\n\n        //资料系统通知子类型\n        var PROFILE_NOTICE_TYPE = {\n            \"PROFILE_MODIFY\": 1 //资料修改\n        };\n\n        //腾讯登录服务错误码（用于托管模式）\n        var TLS_ERROR_CODE = {\n            'OK': 0, //成功\n            'SIGNATURE_EXPIRATION': 11 //用户身份凭证过期\n        };\n\n        //长轮询连接状态\n        var CONNECTION_STATUS = {\n            'INIT': -1, //初始化\n            'ON': 0, //连接正常\n            'RECONNECT': 1, //连接恢复正常\n            'OFF': 9999 //连接已断开,可能是用户网络问题，或者长轮询接口报错引起的\n        };\n\n        var UPLOAD_PIC_BUSSINESS_TYPE = { //图片业务类型\n            'GROUP_MSG': 1, //私聊图片\n            'C2C_MSG': 2, //群聊图片\n            'USER_HEAD': 3, //用户头像\n            'GROUP_HEAD': 4 //群头像\n        };\n\n        var FRIEND_WRITE_MSG_ACTION = { //好友输入消息状态\n            'ING': 14, //正在输入\n            'STOP': 15 //停止输入\n        };\n\n        //ajax默认超时时间，单位：毫秒\n        var ajaxDefaultTimeOut = 15000;\n\n        //大群长轮询接口返回正常时，延时一定时间再发起下一次请求\n        var OK_DELAY_TIME = 1000;\n\n        //大群长轮询接口发生错误时，延时一定时间再发起下一次请求\n        var ERROR_DELAY_TIME = 5000;\n\n        //群提示消息最多显示人数\n        var GROUP_TIP_MAX_USER_COUNT = 10;\n\n        //长轮询连接状态\n        var curLongPollingStatus = CONNECTION_STATUS.INIT;\n\n        //当长轮询连接断开后，是否已经回调过\n        var longPollingOffCallbackFlag = false;\n\n        //当前长轮询返回错误次数\n        var curLongPollingRetErrorCount = 0;\n\n        //长轮询默认超时时间，单位：毫秒\n        var longPollingDefaultTimeOut = 60000;\n\n        //长轮询返回错误次数达到一定值后，发起新的长轮询请求间隔时间，单位：毫秒\n        var longPollingIntervalTime = 5000;\n\n        //没有新消息时，长轮询返回60008错误码是正常的\n        var longPollingTimeOutErrorCode = 60008;\n\n        //多实例登录被kick的错误码\n        var longPollingKickedErrorCode = 91101;\n\n        var longPollingPackageTooLargeErrorCode = 10018;\n        var LongPollingId = null;\n\n        //当前大群长轮询返回错误次数\n        var curBigGroupLongPollingRetErrorCount = 0;\n\n        //最大允许长轮询返回错误次数\n        var LONG_POLLING_MAX_RET_ERROR_COUNT = 10;\n\n        //上传重试累计\n        var Upload_Retry_Times = 0;\n        //最大上传重试\n        var Upload_Retry_Max_Times = 20;\n\n\n        var uploadResultIframeId = 0; //用于上传图片的iframe id\n\n        var ipList = []; //文件下载地址\n        var authkey = null; //文件下载票据\n        var expireTime = null; //文件下载票据超时时间\n\n        //错误码\n        var ERROR = {};\n        //当前登录用户\n        var ctx = {\n            sdkAppID: null,\n            appIDAt3rd: null,\n            accountType: null,\n            identifier: null,\n            tinyid: null,\n            identifierNick: null,\n            userSig: null,\n            a2: null,\n            contentType: 'json',\n            apn: 1\n        };\n        var opt = {};\n        var xmlHttpObjSeq = 0; //ajax请求id\n        var xmlHttpObjMap = {}; //发起的ajax请求\n        var curSeq = 0; //消息seq\n        var tempC2CMsgList = []; //新c2c消息临时缓存\n        var tempC2CHistoryMsgList = []; //漫游c2c消息临时缓存\n\n        var maxApiReportItemCount = 20; //一次最多上报条数\n        var apiReportItems = []; //暂存api接口质量上报数据\n\n        var Resources = {\n            downloadMap: {}\n        };\n\n        //表情标识字符和索引映射关系对象，用户可以自定义\n        var emotionDataIndexs = {\n            \"[惊讶]\": 0,\n            \"[撇嘴]\": 1,\n            \"[色]\": 2,\n            \"[发呆]\": 3,\n            \"[得意]\": 4,\n            \"[流泪]\": 5,\n            \"[害羞]\": 6,\n            \"[闭嘴]\": 7,\n            \"[睡]\": 8,\n            \"[大哭]\": 9,\n            \"[尴尬]\": 10,\n            \"[发怒]\": 11,\n            \"[调皮]\": 12,\n            \"[龇牙]\": 13,\n            \"[微笑]\": 14,\n            \"[难过]\": 15,\n            \"[酷]\": 16,\n            \"[冷汗]\": 17,\n            \"[抓狂]\": 18,\n            \"[吐]\": 19,\n            \"[偷笑]\": 20,\n            \"[可爱]\": 21,\n            \"[白眼]\": 22,\n            \"[傲慢]\": 23,\n            \"[饿]\": 24,\n            \"[困]\": 25,\n            \"[惊恐]\": 26,\n            \"[流汗]\": 27,\n            \"[憨笑]\": 28,\n            \"[大兵]\": 29,\n            \"[奋斗]\": 30,\n            \"[咒骂]\": 31,\n            \"[疑问]\": 32,\n            \"[嘘]\": 33,\n            \"[晕]\": 34\n        };\n\n        //表情对象，用户可以自定义\n        var emotions = {};\n        //工具类\n        var tool = new function () {\n\n            //格式化时间戳\n            //format格式如下：\n            //yyyy-MM-dd hh:mm:ss 年月日时分秒(默认格式)\n            //yyyy-MM-dd 年月日\n            //hh:mm:ss 时分秒\n            this.formatTimeStamp = function (timestamp, format) {\n                if (!timestamp) {\n                    return 0;\n                }\n                var formatTime;\n                format = format || 'yyyy-MM-dd hh:mm:ss';\n                var date = new Date(timestamp * 1000);\n                var o = {\n                    \"M+\": date.getMonth() + 1, //月份\n                    \"d+\": date.getDate(), //日\n                    \"h+\": date.getHours(), //小时\n                    \"m+\": date.getMinutes(), //分\n                    \"s+\": date.getSeconds() //秒\n                };\n                if (/(y+)/.test(format)) {\n                    formatTime = format.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n                } else {\n                    formatTime = format;\n                }\n                for (var k in o) {\n                    if (new RegExp(\"(\" + k + \")\").test(formatTime))\n                        formatTime = formatTime.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n                }\n                return formatTime;\n            };\n\n            //根据群类型英文名转换成中文名\n            this.groupTypeEn2Ch = function (type_en) {\n                var type_ch = null;\n                switch (type_en) {\n                    case 'Public':\n                        type_ch = '公开群';\n                        break;\n                    case 'ChatRoom':\n                        type_ch = '聊天室';\n                        break;\n                    case 'Private':\n                        type_ch = '私有群'; //即讨论组\n                        break;\n                    case 'AVChatRoom':\n                        type_ch = '直播聊天室';\n                        break;\n                    default:\n                        type_ch = type_en;\n                        break;\n                }\n                return type_ch;\n            };\n            //根据群类型中文名转换成英文名\n            this.groupTypeCh2En = function (type_ch) {\n                var type_en = null;\n                switch (type_ch) {\n                    case '公开群':\n                        type_en = 'Public';\n                        break;\n                    case '聊天室':\n                        type_en = 'ChatRoom';\n                        break;\n                    case '私有群': //即讨论组\n                        type_en = 'Private';\n                        break;\n                    case '直播聊天室':\n                        type_en = 'AVChatRoom';\n                        break;\n                    default:\n                        type_en = type_ch;\n                        break;\n                }\n                return type_en;\n            };\n            //根据群身份英文名转换成群身份中文名\n            this.groupRoleEn2Ch = function (role_en) {\n                var role_ch = null;\n                switch (role_en) {\n                    case 'Member':\n                        role_ch = '成员';\n                        break;\n                    case 'Admin':\n                        role_ch = '管理员';\n                        break;\n                    case 'Owner':\n                        role_ch = '群主';\n                        break;\n                    default:\n                        role_ch = role_en;\n                        break;\n                }\n                return role_ch;\n            };\n            //根据群身份中文名转换成群身份英文名\n            this.groupRoleCh2En = function (role_ch) {\n                var role_en = null;\n                switch (role_ch) {\n                    case '成员':\n                        role_en = 'Member';\n                        break;\n                    case '管理员':\n                        role_en = 'Admin';\n                        break;\n                    case '群主':\n                        role_en = 'Owner';\n                        break;\n                    default:\n                        role_en = role_ch;\n                        break;\n                }\n                return role_en;\n            };\n            //根据群消息提示类型英文转换中文\n            this.groupMsgFlagEn2Ch = function (msg_flag_en) {\n                var msg_flag_ch = null;\n                switch (msg_flag_en) {\n                    case 'AcceptAndNotify':\n                        msg_flag_ch = '接收并提示';\n                        break;\n                    case 'AcceptNotNotify':\n                        msg_flag_ch = '接收不提示';\n                        break;\n                    case 'Discard':\n                        msg_flag_ch = '屏蔽';\n                        break;\n                    default:\n                        msg_flag_ch = msg_flag_en;\n                        break;\n                }\n                return msg_flag_ch;\n            };\n            //根据群消息提示类型中文名转换英文名\n            this.groupMsgFlagCh2En = function (msg_flag_ch) {\n                var msg_flag_en = null;\n                switch (msg_flag_ch) {\n                    case '接收并提示':\n                        msg_flag_en = 'AcceptAndNotify';\n                        break;\n                    case '接收不提示':\n                        msg_flag_en = 'AcceptNotNotify';\n                        break;\n                    case '屏蔽':\n                        msg_flag_en = 'Discard';\n                        break;\n                    default:\n                        msg_flag_en = msg_flag_ch;\n                        break;\n                }\n                return msg_flag_en;\n            };\n            //将空格和换行符转换成HTML标签\n            this.formatText2Html = function (text) {\n                var html = text;\n                if (html) {\n                    html = this.xssFilter(html); //用户昵称或群名称等字段会出现脚本字符串\n                    html = html.replace(/ /g, \"&nbsp;\");\n                    html = html.replace(/\\n/g, \"<br/>\");\n                }\n                return html;\n            };\n            //将HTML标签转换成空格和换行符\n            this.formatHtml2Text = function (html) {\n                var text = html;\n                if (text) {\n                    text = text.replace(/&nbsp;/g, \" \");\n                    text = text.replace(/<br\\/>/g, \"\\n\");\n                }\n                return text;\n            };\n            //获取字符串(UTF-8编码)所占字节数\n            //参考：http://zh.wikipedia.org/zh-cn/UTF-8\n            this.getStrBytes = function (str) {\n                if (str == null || str === undefined) return 0;\n                if (typeof str != \"string\") {\n                    return 0;\n                }\n                var total = 0,\n                    charCode, i, len;\n                for (i = 0, len = str.length; i < len; i++) {\n                    charCode = str.charCodeAt(i);\n                    if (charCode <= 0x007f) {\n                        total += 1; //字符代码在000000 – 00007F之间的，用一个字节编码\n                    } else if (charCode <= 0x07ff) {\n                        total += 2; //000080 – 0007FF之间的字符用两个字节\n                    } else if (charCode <= 0xffff) {\n                        total += 3; //000800 – 00D7FF 和 00E000 – 00FFFF之间的用三个字节，注: Unicode在范围 D800-DFFF 中不存在任何字符\n                    } else {\n                        total += 4; //010000 – 10FFFF之间的用4个字节\n                    }\n                }\n                return total;\n            };\n\n\n            //防止XSS攻击\n            this.xssFilter = function (val) {\n                if( xssFilterEnable ){\n                    val = val.toString();\n                    val = val.replace(/[<]/g, \"&lt;\");\n                    val = val.replace(/[>]/g, \"&gt;\");\n                    val = val.replace(/\"/g, \"&quot;\");\n                }\n                return val;\n            };\n\n            //去掉头尾空白符\n            this.trimStr = function (str) {\n                if (!str) return '';\n                str = str.toString();\n                return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n            };\n            //判断是否为8位整数\n            this.validNumber = function (str) {\n                str = str.toString();\n                return str.match(/(^\\d{1,8}$)/g);\n            };\n            this.getReturnError = function (errorInfo, errorCode) {\n                if (!errorCode) {\n                    errorCode = -100;\n                }\n                var error = {\n                    'ActionStatus': ACTION_STATUS.FAIL,\n                    'ErrorCode': errorCode,\n                    'ErrorInfo': errorInfo + \"[\" + errorCode + \"]\"\n                };\n                return error;\n            };\n            this.replaceObject = function (keyMap, json) {\n                for (var a in json) {\n                    if (keyMap[a]) {\n                        json[keyMap[a]] = json[a]\n                        delete json[a]\n                        if (json[keyMap[a]] instanceof Array) {\n                            var len = json[keyMap[a]].length\n                            for (var i = 0; i < len; i++) {\n                                json[keyMap[a]][i] = this.replaceObject(keyMap, json[keyMap[a]][i])\n                            }\n                        } else if (typeof json[keyMap[a]] === 'object') {\n                            json[keyMap[a]] = this.replaceObject(keyMap, json[keyMap[a]])\n                        }\n                    }\n                }\n                return json;\n            }\n        };\n\n        //日志对象\n        var log = new function () {\n\n            var on = true;\n\n            this.setOn = function (onFlag) {\n                on = onFlag;\n            };\n\n            this.getOn = function () {\n                return on;\n            };\n\n            this.error = function (logStr) {\n                try {\n                    on && console.error(logStr);\n                } catch (e) {}\n            };\n            this.warn = function (logStr) {\n                try {\n                    on && console.warn(logStr);\n                } catch (e) {}\n            };\n            this.info = function (logStr) {\n                try {\n                    on && console.info(logStr);\n                } catch (e) {}\n            };\n            this.debug = function (logStr) {\n                try {\n                    on && console.debug(logStr);\n                } catch (e) {}\n            };\n        };\n        //获取unix时间戳\n        var unixtime = function (d) {\n            if (!d) d = new Date();\n            return Math.round(d.getTime() / 1000);\n        };\n        //时间戳转日期\n        var fromunixtime = function (t) {\n            return new Date(t * 1000);\n        };\n        //获取下一个消息序号\n        var nextSeq = function () {\n            if (curSeq) {\n                curSeq = curSeq + 1;\n            } else {\n                curSeq = Math.round(Math.random() * 10000000);\n            }\n            return curSeq;\n        };\n        //产生随机数\n        var createRandom = function () {\n            return Math.round(Math.random() * 4294967296);\n        };\n\n        //发起ajax请求\n        var ajaxRequest = function (meth, url, req, timeout, isLongPolling, cbOk, cbErr) {\n\n            wx.request({\n                url: url,\n                data: req,\n                dataType: 'json',\n                method: meth,\n                header: {\n                    'Content-Type': 'application/json'\n                },\n                success: function (res) {\n                    curLongPollingRetErrorCount = curBigGroupLongPollingRetErrorCount = 0;\n                    if (cbOk) cbOk(res.data);\n                },\n                fail: function (res) {\n                    setTimeout(function () {\n                        var errInfo = \"请求服务器失败,请检查你的网络是否正常\";\n                        var error = tool.getReturnError(errInfo, -2);\n                        //if (!isLongPolling && cbErr) cbErr(error);\n                        if (cbErr) cbErr(error);\n                    }, 16);\n                }\n            });\n        }\n\n        //发起ajax请求（json格式数据）\n        var ajaxRequestJson = function (meth, url, req, timeout, isLongPolling, cbOk, cbErr) {\n            ajaxRequest(meth, url, JSON.stringify(req), timeout, isLongPolling, function (resp) {\n                var json = null;\n                if (resp) json = resp; //将返回的json字符串转换成json对象\n                if (cbOk) cbOk(json);\n            }, cbErr);\n        }\n        //判断用户是否已登录\n        var isLogin = function () {\n            return ctx.sdkAppID && ctx.identifier;\n        };\n        //检查是否登录\n        var checkLogin = function (cbErr, isNeedCallBack) {\n            if (!isLogin()) {\n                if (isNeedCallBack) {\n                    var errInfo = \"请登录\";\n                    var error = tool.getReturnError(errInfo, -4);\n\n                    if (cbErr) cbErr(error);\n                }\n                return false;\n            }\n            return true;\n        };\n\n        //检查是否访问正式环境\n        var isAccessFormalEnv = function () {\n            return isAccessFormaEnvironment;\n        };\n\n        //根据不同的服务名和命令，获取对应的接口地址\n        var getApiUrl = function (srvName, cmd, cbOk, cbErr) {\n            var srvHost = SRV_HOST;\n            if (isAccessFormalEnv()) {\n                srvHost = SRV_HOST.FORMAL.COMMON;\n            } else {\n                srvHost = SRV_HOST.TEST.COMMON;\n            }\n\n            //if (srvName == SRV_NAME.RECENT_CONTACT) {\n            //    srvHost = SRV_HOST.TEST.COMMON;\n            //}\n\n            if (srvName == SRV_NAME.PIC) {\n                if (isAccessFormalEnv()) {\n                    srvHost = SRV_HOST.FORMAL.PIC;\n                } else {\n                    srvHost = SRV_HOST.TEST.PIC;\n                }\n            }\n\n            var url = srvHost + '/' + SRV_NAME_VER[srvName] + '/' + srvName + '/' + cmd + '?websdkappid=' + SDK.APPID + \"&v=\" + SDK.VERSION + \"&platform=\" + SDK.PLAATFORM;;\n\n            if (isLogin()) {\n                if (cmd == 'login' || cmd == 'accesslayer') {\n                    url += '&identifier=' + encodeURIComponent(ctx.identifier) + '&usersig=' + ctx.userSig;\n                } else {\n                    if (ctx.tinyid && ctx.a2) {\n                        url += '&tinyid=' + ctx.tinyid + '&a2=' + ctx.a2;\n                    } else {\n                        if (cbErr) {\n                            log.error(\"tinyid或a2为空[\" + srvName + \"][\" + cmd + \"]\");\n                            cbErr(tool.getReturnError(\"tinyid或a2为空[\" + srvName + \"][\" + cmd + \"]\", -5));\n                            return false;\n                        }\n                    }\n                }\n                url += '&contenttype=' + ctx.contentType;\n            }\n            url += '&sdkappid=' + ctx.sdkAppID + '&accounttype=' + ctx.accountType + '&apn=' + ctx.apn + '&reqtime=' + unixtime();\n            return url;\n        };\n\n        //获取语音下载url\n        var getSoundDownUrl = function (uuid, senderId) {\n            var soundUrl = null;\n            if (authkey && ipList[0]) {\n                // soundUrl = \"http://\" + ipList[0] + \"/asn.com/stddownload_common_file?authkey=\" + authkey + \"&bid=\" + DOWNLOAD_FILE.BUSSINESS_ID + \"&subbid=\" + ctx.sdkAppID + \"&fileid=\" + uuid + \"&filetype=\" + DOWNLOAD_FILE_TYPE.SOUND + \"&openid=\" + senderId + \"&ver=0\";\n                soundUrl = \"https://\" + DOWNLOAD_FILE.SOUND_SERVER_DOMAIN + \"/asn.com/stddownload_common_file?authkey=\" + authkey + \"&bid=\" + DOWNLOAD_FILE.BUSSINESS_ID + \"&subbid=\" + ctx.sdkAppID + \"&fileid=\" + uuid + \"&filetype=\" + DOWNLOAD_FILE_TYPE.SOUND + \"&openid=\" + senderId + \"&ver=0\";\n            } else {\n                log.error(\"拼接语音下载url不报错：ip或者authkey为空\");\n            }\n            return soundUrl;\n        };\n\n        //获取文件下载地址\n        var getFileDownUrl = function (uuid, senderId, fileName) {\n            var fileUrl = null;\n            if (authkey && ipList[0]) {\n                fileUrl = \"http://\" + ipList[0] + \"/asn.com/stddownload_common_file?authkey=\" + authkey + \"&bid=\" + DOWNLOAD_FILE.BUSSINESS_ID + \"&subbid=\" + ctx.sdkAppID + \"&fileid=\" + uuid + \"&filetype=\" + DOWNLOAD_FILE_TYPE.FILE + \"&openid=\" + senderId + \"&ver=0&filename=\" + encodeURIComponent(fileName);\n            } else {\n                log.error(\"拼接文件下载url不报错：ip或者authkey为空\");\n            }\n            Resources.downloadMap[\"uuid_\" + uuid] = fileUrl;\n            return fileUrl;\n        };\n\n        //获取文件下载地址\n        var getFileDownUrlV2 = function (uuid, senderId, fileName, downFlag, receiverId, busiId, type) {\n            var options = {\n                \"From_Account\": senderId, //\"identifer_0\",       // 类型: String, 发送者tinyid\n                \"To_Account\": receiverId, //\"identifer_1\",         // 类型: String, 接收者tinyid\n                \"os_platform\": 10, // 类型: Number, 终端的类型 1(android) 2(ios) 3(windows) 10(others...)\n                \"Timestamp\": unixtime().toString(), // 类型: Number, 时间戳\n                \"Random\": createRandom().toString(), // 类型: Number, 随机值\n                \"request_info\": [ // 类型: Array\n                    {\n                        \"busi_id\": busiId, // 类型: Number, 群(1) C2C(2) 其他请联系sdk开发者分配\n                        \"download_flag\": downFlag, // 类型: Number, 申请下载地址标识  0(申请架平下载地址)  1(申请COS平台下载地址)  2(不需要申请, 直接拿url下载(这里应该不会为2))\n                        \"type\": type, // 类型: Number, 0(短视频缩略图), 1(文件), 2(短视频), 3(ptt), 其他待分配\n                        \"uuid\": uuid, // 类型: Number, 唯一标识一个文件的uuid\n                        \"version\": VERSION_INFO.SERVER_VERSION, // 类型: Number, 架平server版本\n                        \"auth_key\": authkey, // 类型: String, 认证签名\n                        \"ip\": ipList[0] // 类型: Number, 架平IP\n                    }\n                ]\n            };\n            //获取下载地址\n            proto_applyDownload(options, function (resp) {\n                if (resp.error_code == 0 && resp.response_info) {\n                    Resources.downloadMap[\"uuid_\" + options.uuid] = resp.response_info.url;\n                }\n                if (onAppliedDownloadUrl) {\n                    onAppliedDownloadUrl({\n                        uuid: options.uuid,\n                        url: resp.response_info.url,\n                        maps: Resources.downloadMap\n                    });\n                }\n            }, function (resp) {\n                log.error(\"获取下载地址失败\", options.uuid)\n            });\n        };\n\n\n        //重置ajax请求\n        var clearXmlHttpObjMap = function () {\n            //遍历xmlHttpObjMap{}\n            for (var seq in xmlHttpObjMap) {\n                var xmlHttpObj = xmlHttpObjMap[seq];\n                if (xmlHttpObj) {\n                    xmlHttpObj.abort(); //中断ajax请求(长轮询)\n                    xmlHttpObjMap[xmlHttpObjSeq] = null; //清空\n                }\n            }\n            xmlHttpObjSeq = 0;\n            xmlHttpObjMap = {};\n        };\n\n        //重置sdk全局变量\n        var clearSdk = function () {\n\n            clearXmlHttpObjMap();\n\n            //当前登录用户\n            ctx = {\n                sdkAppID: null,\n                appIDAt3rd: null,\n                accountType: null,\n                identifier: null,\n                identifierNick: null,\n                userSig: null,\n                contentType: 'json',\n                apn: 1\n            };\n            opt = {};\n\n            curSeq = 0;\n\n\n            apiReportItems = [];\n\n            MsgManager.clear();\n            MsgStore.clear();\n\n            //重置longpollingId\n            LongPollingId = null;\n        };\n\n        //登录\n        var _login = function (loginInfo, listeners, options, cbOk, cbErr) {\n\n            clearSdk();\n\n            if (options) opt = options;\n            if (opt.isAccessFormalEnv == false) {\n                log.error(\"请切换为正式环境！！！！\");\n                isAccessFormaEnvironment = opt.isAccessFormalEnv;\n            }\n            if (opt.isLogOn == false) {\n                log.setOn(opt.isLogOn);\n            }\n            if( typeof opt.xssFilterEnable !=='undefined'){\n                xssFilterEnable = opt.xssFilterEnable;\n            }\n            /*\n             if(opt.emotions){\n             emotions=opt.emotions;\n             webim.Emotions= emotions;\n             }\n             if(opt.emotionDataIndexs){\n             emotionDataIndexs=opt.emotionDataIndexs;\n             webim.EmotionDataIndexs= emotionDataIndexs;\n             }*/\n\n            if (!loginInfo) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"loginInfo is empty\", -6));\n                    return;\n                }\n            }\n            if (!loginInfo.sdkAppID) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"loginInfo.sdkAppID is empty\", -7));\n                    return;\n                }\n            }\n            if (!loginInfo.accountType) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"loginInfo.accountType is empty\", -8));\n                    return;\n                }\n            }\n\n            if (loginInfo.identifier) {\n                ctx.identifier = loginInfo.identifier.toString();\n            }\n            if (loginInfo.identifier && !loginInfo.userSig) {\n                if (cbErr) {\n                    cbErr(tool.getReturnError(\"loginInfo.userSig is empty\", -9));\n                    return;\n                }\n            }\n            if (loginInfo.userSig) {\n                ctx.userSig = loginInfo.userSig.toString();\n            }\n            ctx.sdkAppID = loginInfo.sdkAppID;\n            ctx.accountType = loginInfo.accountType;\n\n            if (ctx.identifier && ctx.userSig) { //带登录态\n                proto_accesslayer(function () {\n                    //登录\n                    proto_login(\n                        function (identifierNick, headurl) {\n                            MsgManager.init(\n                                listeners,\n                                function (mmInitResp) {\n                                    if (cbOk) {\n                                        mmInitResp.identifierNick = identifierNick;\n                                        mmInitResp.headurl = headurl;\n                                        cbOk(mmInitResp);\n                                    }\n                                }, cbErr\n                            );\n                        },\n                        cbErr\n                    );\n                })\n            } else { //不带登录态，进入直播场景sdk\n                MsgManager.init(\n                    listeners,\n                    cbOk,\n                    cbErr\n                );\n            }\n        };\n\n        //初始化浏览器信息\n        var initBrowserInfo = function () {\n            //初始化浏览器类型\n            BROWSER_INFO = \"wechat\"\n        };\n\n        //接口质量上报\n        var reportApiQuality = function (cmd, errorCode, errorInfo) {\n            if (cmd == 'longpolling' && (errorCode == longPollingTimeOutErrorCode || errorCode == longPollingKickedErrorCode)) { //longpolling 返回60008错误可以视为正常,可以不上报\n                return;\n            }\n            var eventId = CMD_EVENT_ID_MAP[cmd];\n            if (eventId) {\n                var reportTime = unixtime();\n                var uniqKey = null;\n                var msgCmdErrorCode = {\n                    'Code': errorCode,\n                    'ErrMsg': errorInfo\n                };\n                if (ctx.a2) {\n                    uniqKey = ctx.a2.substring(0, 10) + \"_\" + reportTime + \"_\" + createRandom();\n                } else if (ctx.userSig) {\n                    uniqKey = ctx.userSig.substring(0, 10) + \"_\" + reportTime + \"_\" + createRandom();\n                }\n\n                if (uniqKey) {\n\n                    var rptEvtItem = {\n                        \"UniqKey\": uniqKey,\n                        \"EventId\": eventId,\n                        \"ReportTime\": reportTime,\n                        \"MsgCmdErrorCode\": msgCmdErrorCode\n                    };\n\n                    if (cmd == 'login') {\n                        var loginApiReportItems = [];\n                        loginApiReportItems.push(rptEvtItem);\n                        var loginReportOpt = {\n                            \"EvtItems\": loginApiReportItems,\n                            \"MainVersion\": SDK.VERSION,\n                            \"Version\": \"0\"\n                        };\n                        proto_reportApiQuality(loginReportOpt,\n                            function (resp) {\n                                loginApiReportItems = null; //\n                            },\n                            function (err) {\n                                loginApiReportItems = null; //\n                            }\n                        );\n                    } else {\n                        apiReportItems.push(rptEvtItem);\n                        if (apiReportItems.length >= maxApiReportItemCount) { //累计一定条数再上报\n                            var reportOpt = {\n                                \"EvtItems\": apiReportItems,\n                                \"MainVersion\": SDK.VERSION,\n                                \"Version\": \"0\"\n                            };\n                            proto_reportApiQuality(reportOpt,\n                                function (resp) {\n                                    apiReportItems = []; //清空\n                                },\n                                function (err) {\n                                    apiReportItems = []; //清空\n                                }\n                            );\n                        }\n                    }\n\n                }\n            }\n        };\n\n        var proto_accesslayer = function (callback) {\n            ConnManager.apiCall(SRV_NAME.WEB_IM, \"accesslayer\", {}, function (data) {\n                if (data.ErrorCode === 0 && data.WebImAccessLayer === 1) {\n                    SRV_HOST.FORMAL.COMMON = 'https://events.tim.qq.com';\n                }\n                callback();\n            }, function () {\n                callback();\n            });\n        };\n        // REST API calls\n        //上线\n        var proto_login = function (cbOk, cbErr) {\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"login\", {\n                    \"State\": \"Online\"\n                },\n                function (loginResp) {\n                    if (loginResp.TinyId) {\n                        ctx.tinyid = loginResp.TinyId;\n                    } else {\n                        if (cbErr) {\n                            cbErr(tool.getReturnError(\"TinyId is empty\", -10));\n                            return;\n                        }\n                    }\n                    if (loginResp.A2Key) {\n                        ctx.a2 = loginResp.A2Key;\n                    } else {\n                        if (cbErr) {\n                            cbErr(tool.getReturnError(\"A2Key is empty\", -11));\n                            return;\n                        }\n                    }\n                    var tag_list = [\n                        \"Tag_Profile_IM_Nick\",\n                        \"Tag_Profile_IM_Image\"\n                    ];\n                    var options = {\n                        'From_Account': ctx.identifier,\n                        'To_Account': [ctx.identifier],\n                        'LastStandardSequence': 0,\n                        'TagList': tag_list\n                    };\n                    proto_getProfilePortrait(\n                        options,\n                        function (resp) {\n                            var nick, image;\n                            if (resp.UserProfileItem && resp.UserProfileItem.length > 0) {\n                                for (var i in resp.UserProfileItem) {\n                                    for (var j in resp.UserProfileItem[i].ProfileItem) {\n                                        switch (resp.UserProfileItem[i].ProfileItem[j].Tag) {\n                                            case 'Tag_Profile_IM_Nick':\n                                                nick = resp.UserProfileItem[i].ProfileItem[j].Value;\n                                                if (nick) ctx.identifierNick = nick;\n                                                break;\n                                            case 'Tag_Profile_IM_Image':\n                                                image = resp.UserProfileItem[i].ProfileItem[j].Value;\n                                                if (image) ctx.headurl = image;\n                                                break;\n                                        }\n                                    }\n                                }\n                            }\n                            if (cbOk) cbOk(ctx.identifierNick, ctx.headurl); //回传当前用户昵称\n                        }, cbErr);\n                }, cbErr);\n        };\n        //下线\n        var proto_logout = function (type, cbOk, cbErr) {\n            if (!checkLogin(cbErr, false)) { //不带登录态\n                clearSdk();\n                if (cbOk) cbOk({\n                    'ActionStatus': ACTION_STATUS.OK,\n                    'ErrorCode': 0,\n                    'ErrorInfo': 'logout success'\n                });\n                return;\n            }\n            if (type == \"all\") {\n                ConnManager.apiCall(SRV_NAME.OPEN_IM, \"logout\", {},\n                    function (resp) {\n                        clearSdk();\n                        if (cbOk) cbOk(resp);\n                    },\n                    cbErr);\n            } else {\n                ConnManager.apiCall(SRV_NAME.OPEN_IM, \"longpollinglogout\", {\n                        LongPollingId: LongPollingId\n                    },\n                    function (resp) {\n                        clearSdk();\n                        if (cbOk) cbOk(resp);\n                    },\n                    cbErr);\n            }\n        };\n        //发送消息，包括私聊和群聊\n        var proto_sendMsg = function (msg, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            var msgInfo = null;\n\n            switch (msg.sess.type()) {\n                case SESSION_TYPE.C2C:\n                    msgInfo = {\n                        'From_Account': ctx.identifier,\n                        'To_Account': msg.sess.id().toString(),\n                        'MsgTimeStamp': msg.time,\n                        'MsgSeq': msg.seq,\n                        'MsgRandom': msg.random,\n                    \t'MsgBody': [],\n                    \t'OfflinePushInfo': msg.offlinePushInfo\n                    };\n                    break;\n                case SESSION_TYPE.GROUP:\n                    var subType = msg.getSubType();\n                    msgInfo = {\n                        'GroupId': msg.sess.id().toString(),\n                        'From_Account': ctx.identifier,\n                        'Random': msg.random,\n                        'MsgBody': []\n                    };\n                    switch (subType) {\n                        case GROUP_MSG_SUB_TYPE.COMMON:\n                            msgInfo.MsgPriority = \"COMMON\";\n                            break;\n                        case GROUP_MSG_SUB_TYPE.REDPACKET:\n                            msgInfo.MsgPriority = \"REDPACKET\";\n                            break;\n                        case GROUP_MSG_SUB_TYPE.LOVEMSG:\n                            msgInfo.MsgPriority = \"LOVEMSG\";\n                            break;\n                        case GROUP_MSG_SUB_TYPE.TIP:\n                            log.error(\"不能主动发送群提示消息,subType=\" + subType);\n                            break;\n                        default:\n                            log.error(\"发送群消息时，出现未知子消息类型：subType=\" + subType);\n                            return;\n                            break;\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            for (var i in msg.elems) {\n                var elem = msg.elems[i];\n                var msgContent = null;\n                var msgType = elem.type;\n                switch (msgType) {\n                    case MSG_ELEMENT_TYPE.TEXT: //文本\n                        msgContent = {\n                            'Text': elem.content.text\n                        };\n                        break;\n                    case MSG_ELEMENT_TYPE.FACE: //表情\n                        msgContent = {\n                            'Index': elem.content.index,\n                            'Data': elem.content.data\n                        };\n                        break;\n                    case MSG_ELEMENT_TYPE.IMAGE: //图片\n                        var ImageInfoArray = [];\n                        for (var j in elem.content.ImageInfoArray) {\n                            ImageInfoArray.push({\n                                'Type': elem.content.ImageInfoArray[j].type,\n                                'Size': elem.content.ImageInfoArray[j].size,\n                                'Width': elem.content.ImageInfoArray[j].width,\n                                'Height': elem.content.ImageInfoArray[j].height,\n                                'URL': elem.content.ImageInfoArray[j].url\n                            });\n                        }\n                        msgContent = {\n                            'ImageFormat': elem.content.ImageFormat,\n                            'UUID': elem.content.UUID,\n                            'ImageInfoArray': ImageInfoArray\n                        };\n                        break;\n                    case MSG_ELEMENT_TYPE.SOUND: //\n                        log.warn('web端暂不支持发送语音消息');\n                        continue;\n                        break;\n                    case MSG_ELEMENT_TYPE.LOCATION: //\n                        log.warn('web端暂不支持发送地理位置消息');\n                        continue;\n                        break;\n                    case MSG_ELEMENT_TYPE.FILE: //\n                        msgContent = {\n                            'UUID': elem.content.uuid,\n                            'FileName': elem.content.name,\n                            'FileSize': elem.content.size,\n                            'DownloadFlag': elem.content.downFlag\n                        };\n                        break;\n                    case MSG_ELEMENT_TYPE.CUSTOM: //\n                        msgContent = {\n                            'Data': elem.content.data,\n                            'Desc': elem.content.desc,\n                            'Ext': elem.content.ext\n                        };\n                        msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                        break;\n                    default:\n                        log.warn('web端暂不支持发送' + elem.type + '消息');\n                        continue;\n                        break;\n                }\n\n                if (msg.PushInfoBoolean) {\n                    msgInfo.OfflinePushInfo = msg.PushInfo; //当android终端进程被杀掉时才走push，IOS退到后台即可\n                }\n\n                msgInfo.MsgBody.push({\n                    'MsgType': msgType,\n                    'MsgContent': msgContent\n                });\n            }\n            if (msg.sess.type() == SESSION_TYPE.C2C) { //私聊\n                ConnManager.apiCall(SRV_NAME.OPEN_IM, \"sendmsg\", msgInfo, cbOk, cbErr);\n            } else if (msg.sess.type() == SESSION_TYPE.GROUP) { //群聊\n                ConnManager.apiCall(SRV_NAME.GROUP, \"send_group_msg\", msgInfo, cbOk, cbErr);\n            }\n        };\n        //长轮询接口\n        var proto_longPolling = function (options, cbOk, cbErr) {\n            if (!isAccessFormaEnvironment && typeof stopPolling != \"undefined\" && stopPolling == true) {\n                return;\n            }\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"longpolling\", options, cbOk, cbErr, longPollingDefaultTimeOut, true);\n        };\n\n        //长轮询接口(拉取直播聊天室新消息)\n        var proto_bigGroupLongPolling = function (options, cbOk, cbErr, timeout) {\n            ConnManager.apiCall(SRV_NAME.BIG_GROUP_LONG_POLLING, \"get_msg\", options, cbOk, cbErr, timeout);\n        };\n\n        //拉取未读c2c消息接口\n        var proto_getMsgs = function (cookie, syncFlag, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"getmsg\", {\n                    'Cookie': cookie,\n                    'SyncFlag': syncFlag\n                },\n                function (resp) {\n\n                    if (resp.MsgList && resp.MsgList.length) {\n                        for (var i in resp.MsgList) {\n                            tempC2CMsgList.push(resp.MsgList[i]);\n                        }\n                    }\n                    if (resp.SyncFlag == 1) {\n                        proto_getMsgs(resp.Cookie, resp.SyncFlag, cbOk, cbErr);\n                    } else {\n                        resp.MsgList = tempC2CMsgList;\n                        tempC2CMsgList = [];\n                        if (cbOk) cbOk(resp);\n                    }\n                },\n                cbErr);\n        };\n        //C2C消息已读上报接口\n        var proto_c2CMsgReaded = function (cookie, c2CMsgReadedItem, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            var tmpC2CMsgReadedItem = [];\n            for (var i in c2CMsgReadedItem) {\n                var item = {\n                    'To_Account': c2CMsgReadedItem[i].toAccount,\n                    'LastedMsgTime': c2CMsgReadedItem[i].lastedMsgTime\n                };\n                tmpC2CMsgReadedItem.push(item);\n            }\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"msgreaded\", {\n                C2CMsgReaded: {\n                    'Cookie': cookie,\n                    'C2CMsgReadedItem': tmpC2CMsgReadedItem\n                }\n            }, cbOk, cbErr);\n        };\n\n        //删除c2c消息\n        var proto_deleteC2CMsg = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"deletemsg\", options,\n                cbOk, cbErr);\n        };\n\n        //拉取c2c历史消息接口\n        var proto_getC2CHistoryMsgs = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"getroammsg\", options,\n                function (resp) {\n                    var reqMsgCount = options.MaxCnt;\n                    var complete = resp.Complete;\n                    var rspMsgCount = resp.MaxCnt;\n                    var msgKey = resp.MsgKey;\n                    var lastMsgTime = resp.LastMsgTime;\n\n                    if (resp.MsgList && resp.MsgList.length) {\n                        for (var i in resp.MsgList) {\n                            tempC2CHistoryMsgList.push(resp.MsgList[i]);\n                        }\n                    }\n                    var netxOptions = null;\n                    if (complete == 0) { //还有历史消息可拉取\n                        if (rspMsgCount < reqMsgCount) {\n                            netxOptions = {\n                                'Peer_Account': options.Peer_Account,\n                                'MaxCnt': reqMsgCount - rspMsgCount,\n                                'LastMsgTime': lastMsgTime,\n                                'MsgKey': msgKey\n                            };\n                        }\n                    }\n\n                    if (netxOptions) { //继续拉取\n                        proto_getC2CHistoryMsgs(netxOptions, cbOk, cbErr);\n                    } else {\n                        resp.MsgList = tempC2CHistoryMsgList;\n                        tempC2CHistoryMsgList = [];\n                        if (cbOk) cbOk(resp);\n                    }\n                },\n                cbErr);\n        };\n\n        //群组接口\n        //创建群组\n        //协议参考：https://www.qcloud.com/doc/product/269/1615\n        var proto_createGroup = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            var opt = {\n                //必填    群组形态，包括Public（公开群），Private（私有群），ChatRoom（聊天室），AVChatRoom（互动直播聊天室）。\n                'Type': options.Type,\n                //必填    群名称，最长30字节。\n                'Name': options.Name\n            };\n            var member_list = [];\n\n            //Array 选填  初始群成员列表，最多500个。成员信息字段详情参见：群成员资料。\n            for (var i = 0; i < options.MemberList.length; i++) {\n                member_list.push({\n                    'Member_Account': options.MemberList[i]\n                })\n            }\n            opt.MemberList = member_list;\n            //选填    为了使得群组ID更加简单，便于记忆传播，腾讯云支持APP在通过REST API创建群组时自定义群组ID。详情参见：自定义群组ID。\n            if (options.GroupId) {\n                opt.GroupId = options.GroupId;\n            }\n            //选填    群主id，自动添加到群成员中。如果不填，群没有群主。\n            if (options.Owner_Account) {\n                opt.Owner_Account = options.Owner_Account;\n            }\n            //选填    群简介，最长240字节。\n            if (options.Introduction) {\n                opt.Introduction = options.Introduction;\n            }\n            //选填    群公告，最长300字节。\n            if (options.Notification) {\n                opt.Notification = options.Notification;\n            }\n            //选填    最大群成员数量，最大为10000，不填默认为2000个。\n            if (options.MaxMemberCount) {\n                opt.MaxMemberCount = options.MaxMemberCount;\n            }\n            //选填    申请加群处理方式。包含FreeAccess（自由加入），NeedPermission（需要验证），DisableApply（禁止加群），不填默认为NeedPermission（需要验证）。\n            if (options.ApplyJoinOption) { //\n                opt.ApplyJoinOption = options.ApplyJoinOption;\n            }\n            //Array 选填  群组维度的自定义字段，默认情况是没有的，需要开通，详情参见：自定义字段。\n            if (options.AppDefinedData) {\n                opt.AppDefinedData = options.AppDefinedData;\n            }\n            //选填    群头像URL，最长100字节。\n            if (options.FaceUrl) {\n                opt.FaceUrl = options.FaceUrl;\n            }\n            ConnManager.apiCall(SRV_NAME.GROUP, \"create_group\", opt,\n                cbOk, cbErr);\n        };\n\n        //创建群组-高级接口\n        //协议参考：https://www.qcloud.com/doc/product/269/1615\n        var proto_createGroupHigh = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.GROUP, \"create_group\", options,\n                cbOk, cbErr);\n        };\n\n        //修改群组基本资料\n        //协议参考：https://www.qcloud.com/doc/product/269/1620\n        var proto_modifyGroupBaseInfo = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"modify_group_base_info\", options,\n                cbOk, cbErr);\n        };\n\n        //申请加群\n        var proto_applyJoinGroup = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            options.GroupId = String(options.GroupId)\n            ConnManager.apiCall(SRV_NAME.GROUP, \"apply_join_group\", {\n                    'GroupId': options.GroupId,\n                    'ApplyMsg': options.ApplyMsg,\n                    'UserDefinedField': options.UserDefinedField\n                },\n                cbOk, cbErr);\n        };\n\n        //申请加入大群\n    // var BigGroupId;\n        var proto_applyJoinBigGroup = function (options, cbOk, cbErr) {\n            options.GroupId = String(options.GroupId)\n        //BigGroupId = options.GroupId;\n            var srvName;\n            if (!checkLogin(cbErr, false)) { //未登录\n                srvName = SRV_NAME.BIG_GROUP;\n            } else { //已登录\n                srvName = SRV_NAME.GROUP;\n        }\n        if( MsgManager.checkBigGroupLongPollingOn( options.GroupId ) ) {\n            cbErr && cbErr(tool.getReturnError(\"Join Group failed; You have already been in this group, you have to quit group before you rejoin\", 10013));\n            return;\n            }\n            ConnManager.apiCall(srvName, \"apply_join_group\", {\n                    'GroupId': options.GroupId,\n                    'ApplyMsg': options.ApplyMsg,\n                    'UserDefinedField': options.UserDefinedField\n                },\n                function (resp) {\n                    if (resp.JoinedStatus && resp.JoinedStatus == 'JoinedSuccess') {\n                        if (resp.LongPollingKey) {\n                            MsgManager.setBigGroupLongPollingOn(true); //开启长轮询\n                        MsgManager.setBigGroupLongPollingKey(options.GroupId, resp.LongPollingKey); //更新大群长轮询key\n                            MsgManager.setBigGroupLongPollingMsgMap(options.GroupId, 0); //收到的群消息置0\n                        MsgManager.bigGroupLongPolling( options.GroupId ); //开启长轮询\n                        } else { //没有返回LongPollingKey，说明申请加的群不是直播聊天室(AVChatRoom)\n                            cbErr && cbErr(tool.getReturnError(\"Join Group succeed; But the type of group is not AVChatRoom: groupid=\" + options.GroupId, -12));\n                            return;\n                        }\n                    }\n                    if (cbOk) cbOk(resp);\n                },\n                function (err) {\n\n                    if (cbErr) cbErr(err);\n                });\n        };\n\n        //处理加群申请(同意或拒绝)\n        var proto_handleApplyJoinGroupPendency = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"handle_apply_join_group\", {\n                    'GroupId': options.GroupId,\n                    'Applicant_Account': options.Applicant_Account,\n                    'HandleMsg': options.HandleMsg,\n                    'Authentication': options.Authentication,\n                    'MsgKey': options.MsgKey,\n                    'ApprovalMsg': options.ApprovalMsg,\n                    'UserDefinedField': options.UserDefinedField\n                },\n                cbOk,\n                function (err) {\n                    if (err.ErrorCode == 10024) { //apply has be handled\n                        if (cbOk) {\n                            var resp = {\n                                'ActionStatus': ACTION_STATUS.OK,\n                                'ErrorCode': 0,\n                                'ErrorInfo': '该申请已经被处理过'\n                            };\n                            cbOk(resp);\n                        }\n                    } else {\n                        if (cbErr) cbErr(err);\n                    }\n                }\n            );\n        };\n\n        //获取群组未决列表\n        var proto_getPendencyGroup = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"get_pendency\", {\n                    'StartTime': options.StartTime,\n                    'Limit': options.Limit,\n                    'Handle_Account': ctx.identifier\n                },\n                cbOk,\n                function (err) {\n\n                }\n            );\n        };\n\n\n        //群组未决已经上报\n        var proto_getPendencyGroupRead = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"report_pendency\", {\n                    'ReportTime': options.ReportTime,\n                    'From_Account': ctx.identifier\n                },\n                cbOk,\n                function (err) {\n\n                }\n            );\n        };\n\n        //处理被邀请进群申请(同意或拒绝)\n        var proto_handleInviteJoinGroupRequest = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"handle_invite_join_group\", {\n                    'GroupId': options.GroupId,\n                    'Inviter_Account': options.Inviter_Account,\n                    'HandleMsg': options.HandleMsg,\n                    'Authentication': options.Authentication,\n                    'MsgKey': options.MsgKey,\n                    'ApprovalMsg': options.ApprovalMsg,\n                    'UserDefinedField': options.UserDefinedField\n                },\n                cbOk,\n                function (err) {\n\n                }\n            );\n        };\n\n        //主动退群\n        var proto_quitGroup = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"quit_group\", {\n                    'GroupId': options.GroupId\n                },\n                cbOk, cbErr);\n        };\n\n        //退出大群\n        var proto_quitBigGroup = function (options, cbOk, cbErr) {\n            var srvName;\n            if (!checkLogin(cbErr, false)) { //未登录\n                srvName = SRV_NAME.BIG_GROUP;\n            } else { //已登录\n                srvName = SRV_NAME.GROUP;\n            }\n        MsgManager.resetBigGroupLongPollingInfo( options.GroupId );\n            ConnManager.apiCall(srvName, \"quit_group\", {\n                    'GroupId': options.GroupId\n                },\n                function (resp) {\n                    MsgStore.delSessByTypeId(SESSION_TYPE.GROUP, options.GroupId);\n                    //重置当前再请求中的ajax\n                    //clearXmlHttpObjMap();\n                    //退出大群成功之后需要重置长轮询信息\n                    // MsgManager.resetBigGroupLongPollingInfo();\n                    if (cbOk) cbOk(resp);\n                },\n                cbErr);\n        };\n        //查找群(按名称)\n        var proto_searchGroupByName = function (options, cbOk, cbErr) {\n            ConnManager.apiCall(SRV_NAME.GROUP, \"search_group\", options, cbOk, cbErr);\n        };\n\n        //获取群组公开资料\n        var proto_getGroupPublicInfo = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"get_group_public_info\", {\n                    'GroupIdList': options.GroupIdList,\n                    'ResponseFilter': {\n                        'GroupBasePublicInfoFilter': options.GroupBasePublicInfoFilter\n                    }\n                },\n                function (resp) {\n                    resp.ErrorInfo = '';\n                    if (resp.GroupInfo) {\n                        for (var i in resp.GroupInfo) {\n                            var errorCode = resp.GroupInfo[i].ErrorCode;\n                            if (errorCode > 0) {\n                                resp.ActionStatus = ACTION_STATUS.FAIL;\n                                resp.GroupInfo[i].ErrorInfo = \"[\" + errorCode + \"]\" + resp.GroupInfo[i].ErrorInfo;\n                                resp.ErrorInfo += resp.GroupInfo[i].ErrorInfo + '\\n';\n                            }\n                        }\n                    }\n                    if (resp.ActionStatus == ACTION_STATUS.FAIL) {\n                        if (cbErr) {\n                            cbErr(resp);\n                        }\n                    } else if (cbOk) {\n                        cbOk(resp);\n                    }\n\n                },\n                cbErr);\n        };\n\n        //获取群组详细资料--高级\n        //请求协议参考：https://www.qcloud.com/doc/product/269/1616\n        var proto_getGroupInfo = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            var opt = {\n                'GroupIdList': options.GroupIdList,\n                'ResponseFilter': {\n                    'GroupBaseInfoFilter': options.GroupBaseInfoFilter,\n                    'MemberInfoFilter': options.MemberInfoFilter\n                }\n            };\n            if (options.AppDefinedDataFilter_Group) {\n                opt.ResponseFilter.AppDefinedDataFilter_Group = options.AppDefinedDataFilter_Group;\n            }\n            if (options.AppDefinedDataFilter_GroupMember) {\n                opt.ResponseFilter.AppDefinedDataFilter_GroupMember = options.AppDefinedDataFilter_GroupMember;\n            }\n            ConnManager.apiCall(SRV_NAME.GROUP, \"get_group_info\", opt,\n                cbOk, cbErr);\n        };\n\n        //获取群组成员-高级接口\n        //协议参考：https://www.qcloud.com/doc/product/269/1617\n        var proto_getGroupMemberInfo = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"get_group_member_info\", {\n                    'GroupId': options.GroupId,\n                    'Offset': options.Offset,\n                    'Limit': options.Limit,\n                    'MemberInfoFilter': options.MemberInfoFilter,\n                    'MemberRoleFilter': options.MemberRoleFilter,\n                    'AppDefinedDataFilter_GroupMember': options.AppDefinedDataFilter_GroupMember\n                },\n                cbOk, cbErr);\n        };\n\n\n        //增加群组成员\n        //协议参考：https://www.qcloud.com/doc/product/269/1621\n        var proto_addGroupMember = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"add_group_member\", {\n                    'GroupId': options.GroupId,\n                    'Silence': options.Silence,\n                    'MemberList': options.MemberList\n                },\n                cbOk, cbErr);\n        };\n        //修改群组成员资料\n        //协议参考：https://www.qcloud.com/doc/product/269/1623\n        var proto_modifyGroupMember = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            var opt = {};\n            if (options.GroupId) {\n                opt.GroupId = options.GroupId;\n            }\n            if (options.Member_Account) {\n                opt.Member_Account = options.Member_Account;\n            }\n            //Admin或者Member\n            if (options.Role) {\n                opt.Role = options.Role;\n            }\n            // AcceptAndNotify代表解收并提示消息，Discard代表不接收也不提示消息，AcceptNotNotify代表接收消息但不提示\n            if (options.MsgFlag) {\n                opt.MsgFlag = options.MsgFlag;\n            }\n            if (options.ShutUpTime) { //禁言时间\n                opt.ShutUpTime = options.ShutUpTime;\n            }\n            if (options.NameCard) { //群名片,最大不超过50个字节\n                opt.NameCard = options.NameCard;\n            }\n            if (options.AppMemberDefinedData) { //群成员维度的自定义字段，默认情况是没有的，需要开通\n                opt.AppMemberDefinedData = options.AppMemberDefinedData;\n            }\n            ConnManager.apiCall(SRV_NAME.GROUP, \"modify_group_member_info\", opt,\n                cbOk, cbErr);\n        };\n        //删除群组成员\n        //协议参考：https://www.qcloud.com/doc/product/269/1622\n        var proto_deleteGroupMember = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"delete_group_member\", {\n                    'GroupId': options.GroupId,\n                    'Silence': options.Silence,\n                    'MemberToDel_Account': options.MemberToDel_Account,\n                    'Reason': options.Reason\n                },\n                cbOk, cbErr);\n        };\n        //解散群组\n        //协议参考：https://www.qcloud.com/doc/product/269/1624\n        var proto_destroyGroup = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"destroy_group\", {\n                    'GroupId': options.GroupId\n                },\n                cbOk, cbErr);\n        };\n        //转让群组\n        //协议参考：https://www.qcloud.com/doc/product/269/1633\n        var proto_changeGroupOwner = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.GROUP, \"change_group_owner\", options, cbOk, cbErr);\n        };\n        //获取用户所加入的群组-高级接口\n        //协议参考：https://www.qcloud.com/doc/product/269/1625\n        var proto_getJoinedGroupListHigh = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"get_joined_group_list\", {\n                    'Member_Account': options.Member_Account,\n                    'Limit': options.Limit,\n                    'Offset': options.Offset,\n                    'GroupType': options.GroupType,\n                    'ResponseFilter': {\n                        'GroupBaseInfoFilter': options.GroupBaseInfoFilter,\n                        'SelfInfoFilter': options.SelfInfoFilter\n                    }\n                },\n                cbOk, cbErr);\n        };\n        //查询一组UserId在群中的身份\n        //协议参考：https://www.qcloud.com/doc/product/269/1626\n        var proto_getRoleInGroup = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"get_role_in_group\", {\n                    'GroupId': options.GroupId,\n                    'User_Account': options.User_Account\n                },\n                cbOk, cbErr);\n        };\n        //设置取消成员禁言时间\n        //协议参考：https://www.qcloud.com/doc/product/269/1627\n        var proto_forbidSendMsg = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            ConnManager.apiCall(SRV_NAME.GROUP, \"forbid_send_msg\", {\n                    'GroupId': options.GroupId,\n                    'Members_Account': options.Members_Account,\n                    'ShutUpTime': options.ShutUpTime //单位为秒，为0时表示取消禁言\n                },\n                cbOk, cbErr);\n        };\n\n        //发送自定义群系统通知\n        var proto_sendCustomGroupNotify = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.GROUP, \"send_group_system_notification\", options,\n                cbOk, cbErr);\n        };\n\n        //拉取群消息接口\n        var proto_getGroupMsgs = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.GROUP, \"group_msg_get\", {\n                    \"GroupId\": options.GroupId,\n                    \"ReqMsgSeq\": options.ReqMsgSeq,\n                    \"ReqMsgNumber\": options.ReqMsgNumber\n                },\n                cbOk, cbErr);\n        };\n        //群消息已读上报接口\n        var proto_groupMsgReaded = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.GROUP, \"msg_read_report\", {\n                    'GroupId': options.GroupId,\n                    'MsgReadedSeq': options.MsgReadedSeq\n                },\n                cbOk, cbErr);\n        };\n        //end\n\n        //好友接口\n        //处理好友接口返回的错误码\n        var convertErrorEn2ZhFriend = function (resp) {\n            var errorAccount = [];\n            if (resp.Fail_Account && resp.Fail_Account.length) {\n                errorAccount = resp.Fail_Account;\n            }\n            if (resp.Invalid_Account && resp.Invalid_Account.length) {\n                for (var k in resp.Invalid_Account) {\n                    errorAccount.push(resp.Invalid_Account[k]);\n                }\n            }\n            if (errorAccount.length) {\n                resp.ActionStatus = ACTION_STATUS.FAIL;\n                resp.ErrorCode = ERROR_CODE_CUSTOM;\n                resp.ErrorInfo = '';\n                for (var i in errorAccount) {\n                    var failCount = errorAccount[i];\n                    for (var j in resp.ResultItem) {\n                        if (resp.ResultItem[j].To_Account == failCount) {\n\n                            var resultCode = resp.ResultItem[j].ResultCode;\n                            resp.ResultItem[j].ResultInfo = \"[\" + resultCode + \"]\" + resp.ResultItem[j].ResultInfo;\n                            resp.ErrorInfo += resp.ResultItem[j].ResultInfo + \"\\n\";\n                            break;\n                        }\n                    }\n                }\n            }\n            return resp;\n        };\n        //添加好友\n        var proto_applyAddFriend = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_add\", {\n                    'From_Account': ctx.identifier,\n                    'AddFriendItem': options.AddFriendItem\n                },\n                function (resp) {\n                    var newResp = convertErrorEn2ZhFriend(resp);\n                    if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                        if (cbErr) cbErr(newResp);\n                    } else if (cbOk) {\n                        cbOk(newResp);\n                    }\n                }, cbErr);\n        };\n        //删除好友\n        var proto_deleteFriend = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_delete\", {\n                    'From_Account': ctx.identifier,\n                    'To_Account': options.To_Account,\n                    'DeleteType': options.DeleteType\n                },\n                function (resp) {\n                    var newResp = convertErrorEn2ZhFriend(resp);\n                    if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                        if (cbErr) cbErr(newResp);\n                    } else if (cbOk) {\n                        cbOk(newResp);\n                    }\n                }, cbErr);\n        };\n\n        //删除会话\n        var proto_deleteChat = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n\n            if (options.chatType == 1) {\n                ConnManager.apiCall(SRV_NAME.DEL_CHAT, \"delete\", {\n                        'From_Account': ctx.identifier,\n                        'Type': options.chatType,\n                        'To_Account': options.To_Account\n                    },\n                    cbOk, cbErr);\n            } else {\n                ConnManager.apiCall(SRV_NAME.DEL_CHAT, \"delete\", {\n                        'From_Account': ctx.identifier,\n                        'Type': options.chatType,\n                        'ToGroupid': options.To_Account\n                    },\n                    cbOk, cbErr);\n\n            }\n\n        };\n\n        //获取好友申请\n        var proto_getPendency = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"pendency_get\", {\n                    \"From_Account\": ctx.identifier,\n                    \"PendencyType\": options.PendencyType,\n                    \"StartTime\": options.StartTime,\n                    \"MaxLimited\": options.MaxLimited,\n                    \"LastSequence\": options.LastSequence\n                },\n                cbOk, cbErr);\n        };\n        //好友申请已读上报\n        var proto_getPendencyReport = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"PendencyReport\", {\n                    \"From_Account\": ctx.identifier,\n                    \"LatestPendencyTimeStamp\": options.LatestPendencyTimeStamp\n                },\n                cbOk, cbErr);\n        };\n        //删除好友申请\n        var proto_deletePendency = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"pendency_delete\", {\n                    \"From_Account\": ctx.identifier,\n                    \"PendencyType\": options.PendencyType,\n                    \"To_Account\": options.To_Account\n\n                },\n                function (resp) {\n                    var newResp = convertErrorEn2ZhFriend(resp);\n                    if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                        if (cbErr) cbErr(newResp);\n                    } else if (cbOk) {\n                        cbOk(newResp);\n                    }\n                }, cbErr);\n        };\n        //处理好友申请\n        var proto_responseFriend = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_response\", {\n                    'From_Account': ctx.identifier,\n                    'ResponseFriendItem': options.ResponseFriendItem\n                },\n                function (resp) {\n                    var newResp = convertErrorEn2ZhFriend(resp);\n                    if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                        if (cbErr) cbErr(newResp);\n                    } else if (cbOk) {\n                        cbOk(newResp);\n                    }\n                }, cbErr);\n        };\n        //我的好友\n        var proto_getAllFriend = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"friend_get_all\", {\n                    'From_Account': ctx.identifier,\n                    'TimeStamp': options.TimeStamp,\n                    'StartIndex': options.StartIndex,\n                    'GetCount': options.GetCount,\n                    'LastStandardSequence': options.LastStandardSequence,\n                    'TagList': options.TagList\n                },\n                cbOk, cbErr);\n        };\n\n        //资料接口\n        //查看个人资料\n        var proto_getProfilePortrait = function (options, cbOk, cbErr) {\n            if (options.To_Account.length > 100) {\n                options.To_Account.length = 100;\n                log.error('获取用户资料人数不能超过100人')\n            }\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.PROFILE, \"portrait_get\", {\n                    'From_Account': ctx.identifier,\n                    'To_Account': options.To_Account,\n                    //'LastStandardSequence':options.LastStandardSequence,\n                    'TagList': options.TagList\n                },\n                function (resp) {\n                    var errorAccount = [];\n                    if (resp.Fail_Account && resp.Fail_Account.length) {\n                        errorAccount = resp.Fail_Account;\n                    }\n                    if (resp.Invalid_Account && resp.Invalid_Account.length) {\n                        for (var k in resp.Invalid_Account) {\n                            errorAccount.push(resp.Invalid_Account[k]);\n                        }\n                    }\n                    if (errorAccount.length) {\n                        resp.ActionStatus = ACTION_STATUS.FAIL;\n                        resp.ErrorCode = ERROR_CODE_CUSTOM;\n                        resp.ErrorInfo = '';\n                        for (var i in errorAccount) {\n                            var failCount = errorAccount[i];\n                            for (var j in resp.UserProfileItem) {\n                                if (resp.UserProfileItem[j].To_Account == failCount) {\n                                    var resultCode = resp.UserProfileItem[j].ResultCode;\n                                    resp.UserProfileItem[j].ResultInfo = \"[\" + resultCode + \"]\" + resp.UserProfileItem[j].ResultInfo;\n                                    resp.ErrorInfo += \"账号:\" + failCount + \",\" + resp.UserProfileItem[j].ResultInfo + \"\\n\";\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (resp.ActionStatus == ACTION_STATUS.FAIL) {\n                        if (cbErr) cbErr(resp);\n                    } else if (cbOk) {\n                        cbOk(resp);\n                    }\n                },\n                cbErr);\n        };\n\n        //设置个人资料\n        var proto_setProfilePortrait = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.PROFILE, \"portrait_set\", {\n                    'From_Account': ctx.identifier,\n                    'ProfileItem': options.ProfileItem\n                },\n                function (resp) {\n                    for (var i in options.ProfileItem) {\n                        var profile = options.ProfileItem[i];\n                        if (profile.Tag == 'Tag_Profile_IM_Nick') {\n                            ctx.identifierNick = profile.Value; //更新昵称\n                            break;\n                        }\n                    }\n                    if (cbOk) cbOk(resp);\n                }, cbErr);\n        };\n\n        //增加黑名单\n        var proto_addBlackList = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"black_list_add\", {\n                    'From_Account': ctx.identifier,\n                    'To_Account': options.To_Account\n                },\n                function (resp) {\n                    var newResp = convertErrorEn2ZhFriend(resp);\n                    if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                        if (cbErr) cbErr(newResp);\n                    } else if (cbOk) {\n                        cbOk(newResp);\n                    }\n                }, cbErr);\n        };\n\n        //删除黑名单\n        var proto_deleteBlackList = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"black_list_delete\", {\n                    'From_Account': ctx.identifier,\n                    'To_Account': options.To_Account\n                },\n                function (resp) {\n                    var newResp = convertErrorEn2ZhFriend(resp);\n                    if (newResp.ActionStatus == ACTION_STATUS.FAIL) {\n                        if (cbErr) cbErr(newResp);\n                    } else if (cbOk) {\n                        cbOk(newResp);\n                    }\n                }, cbErr);\n        };\n\n        //我的黑名单\n        var proto_getBlackList = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.FRIEND, \"black_list_get\", {\n                    'From_Account': ctx.identifier,\n                    'StartIndex': options.StartIndex,\n                    'MaxLimited': options.MaxLimited,\n                    'LastSequence': options.LastSequence\n                },\n                cbOk, cbErr);\n        };\n\n        //获取最近联系人\n        var proto_getRecentContactList = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.RECENT_CONTACT, \"get\", {\n                    'From_Account': ctx.identifier,\n                    'Count': options.Count\n                },\n                cbOk, cbErr);\n        };\n\n        //上传图片或文件\n        var proto_uploadPic = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            var cmdName;\n            if (isAccessFormalEnv()) {\n                cmdName = 'pic_up';\n            } else {\n                cmdName = 'pic_up_test';\n            }\n            ConnManager.apiCall(SRV_NAME.PIC, cmdName, {\n                    'App_Version': VERSION_INFO.APP_VERSION,\n                    'From_Account': ctx.identifier,\n                    'To_Account': options.To_Account,\n                    'Seq': options.Seq,\n                    'Timestamp': options.Timestamp,\n                    'Random': options.Random,\n                    'File_Str_Md5': options.File_Str_Md5,\n                    'File_Size': options.File_Size,\n                    'File_Type': options.File_Type,\n                    'Server_Ver': VERSION_INFO.SERVER_VERSION,\n                    'Auth_Key': authkey,\n                    'Busi_Id': options.Busi_Id,\n                    'PkgFlag': options.PkgFlag,\n                    'Slice_Offset': options.Slice_Offset,\n                    'Slice_Size': options.Slice_Size,\n                    'Slice_Data': options.Slice_Data\n                },\n                cbOk, cbErr);\n        };\n\n        //获取语音和文件下载IP和authkey\n        var proto_getIpAndAuthkey = function (cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"authkey\", {}, cbOk, cbErr);\n        };\n\n        //接口质量上报\n        var proto_reportApiQuality = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.IM_OPEN_STAT, \"web_report\", options, cbOk, cbErr);\n        };\n\n\n        var proto_getLongPollingId = function (options, cbOk, cbErr) {\n            if (!checkLogin(cbErr, true)) return;\n            ConnManager.apiCall(SRV_NAME.OPEN_IM, \"getlongpollingid\", {},\n                function (resp) {\n                    cbOk && cbOk(resp);\n                }, cbErr);\n        }\n\n\n        var proto_applyDownload = function (options, cbOk, cbErr) {\n            //把下载地址push到map中\n            ConnManager.apiCall(SRV_NAME.PIC, \"apply_download\", options, cbOk, cbErr);\n        }\n\n        //end\n        initBrowserInfo();\n        // singleton object ConnManager\n        var ConnManager = new function () {\n            var onConnCallback = null; //回调函数\n            this.init = function (onConnNotify, cbOk, cbErr) {\n                if (onConnNotify) onConnCallback = onConnNotify;\n            };\n            this.callBack = function (info) {\n                if (onConnCallback) onConnCallback(info);\n            };\n            this.clear = function () {\n                onConnCallback = null;\n            };\n            //请求后台服务接口\n            this.apiCall = function (type, cmd, data, cbOk, cbErr, timeout, isLongPolling) {\n                //封装后台服务接口地址\n                var url = getApiUrl(type, cmd, cbOk, cbErr);\n                if (url == false) return;\n                //发起ajax请求\n                ajaxRequestJson(\"POST\", url, data, timeout, isLongPolling, function (resp) {\n                    var errorCode = null,\n                        tempErrorInfo = '';\n                    if (cmd == 'pic_up') {\n                        data.Slice_Data = '';\n                    }\n                    var info = \"\\n request url: \\n\" + url + \"\\n request body: \\n\" + JSON.stringify(data) + \"\\n response: \\n\" + JSON.stringify(resp);\n                    //成功\n                    if (resp.ActionStatus == ACTION_STATUS.OK) {\n                        log.info(\"[\" + type + \"][\" + cmd + \"]success: \" + info);\n                        if (cbOk) cbOk(resp); //回调\n                        errorCode = 0;\n                        tempErrorInfo = '';\n                    } else {\n                        errorCode = resp.ErrorCode;\n                        tempErrorInfo = resp.ErrorInfo;\n                        //报错\n                        if (cbErr) {\n                            resp.SrcErrorInfo = resp.ErrorInfo;\n                            resp.ErrorInfo = \"[\" + type + \"][\" + cmd + \"]failed: \" + info;\n                            if (cmd != 'longpolling' || resp.ErrorCode != longPollingTimeOutErrorCode) {\n                                log.error(resp.ErrorInfo);\n                            }\n                            cbErr(resp);\n                        }\n                    }\n                    reportApiQuality(cmd, errorCode, tempErrorInfo); //接口质量上报\n                }, function (err) {\n                    cbErr && cbErr(err);\n                    reportApiQuality(cmd, err.ErrorCode, err.ErrorInfo); //接口质量上报\n                });\n            };\n        };\n        // class Session\n        var Session = function (type, id, name, icon, time, seq) {\n            this._impl = {\n                skey: Session.skey(type, id),\n                type: type,\n                id: id,\n                name: name,\n                icon: icon,\n                unread: 0, //未读消息数\n                isAutoRead: false,\n                time: time >= 0 ? time : 0,\n                curMaxMsgSeq: seq >= 0 ? seq : 0,\n                msgs: [],\n                isFinished: 1\n            };\n        };\n        Session.skey = function (type, id) {\n            return type + id;\n        };\n        Session.prototype.type = function () {\n            return this._impl.type;\n        };\n        Session.prototype.id = function () {\n            return this._impl.id;\n        };\n        Session.prototype.name = function () {\n            return this._impl.name;\n        };\n        Session.prototype.icon = function () {\n            return this._impl.icon;\n        };\n        Session.prototype.unread = function (val) {\n            if (typeof val !== 'undefined') {\n                this._impl.unread = val;\n            } else {\n                return this._impl.unread;\n            }\n        };\n        Session.prototype.isFinished = function (val) {\n            if (typeof val !== 'undefined') {\n                this._impl.isFinished = val;\n            } else {\n                return this._impl.isFinished;\n            }\n        };\n        Session.prototype.time = function () {\n            return this._impl.time;\n        };\n        Session.prototype.curMaxMsgSeq = function (seq) {\n            if (typeof seq !== 'undefined') {\n                this._impl.curMaxMsgSeq = seq;\n            } else {\n                return this._impl.curMaxMsgSeq;\n            }\n        };\n        Session.prototype.msgCount = function () {\n            return this._impl.msgs.length;\n        };\n        Session.prototype.msg = function (index) {\n            return this._impl.msgs[index];\n        };\n        Session.prototype.msgs = function () {\n            return this._impl.msgs;\n        };\n        Session.prototype._impl_addMsg = function (msg, unread) {\n            this._impl.msgs.push(msg);\n            //if (!msg.isSend && msg.time > this._impl.time)\n            if (msg.time > this._impl.time)\n                this._impl.time = msg.time;\n            //if (!msg.isSend && msg.seq > this._impl.curMaxMsgSeq)\n            if (msg.seq > this._impl.curMaxMsgSeq)\n                this._impl.curMaxMsgSeq = msg.seq;\n            //自己发送的消息不计入未读数\n            if (!msg.isSend && !this._impl.isAutoRead && unread) {\n                this._impl.unread++;\n            }\n        };\n        //class C2CMsgReadedItem\n        var C2CMsgReadedItem = function (toAccount, lastedMsgTime) {\n            this.toAccount = toAccount;\n            this.lastedMsgTime = lastedMsgTime;\n        }\n\n\n        // class Msg\n        var Msg = function (sess, isSend, seq, random, time, fromAccount, subType, fromAccountNick, fromAccountHeadurl) {\n            this.sess = sess;\n            this.subType = subType >= 0 ? subType : 0; //消息类型,c2c消息时，type取值为0；group消息时，type取值0和1，0-普通群消息，1-群提示消息\n            this.fromAccount = fromAccount;\n            this.fromAccountNick = fromAccountNick ? fromAccountNick : fromAccount;\n            this.fromAccountHeadurl = fromAccountHeadurl || null;\n            this.isSend = Boolean(isSend);\n            this.seq = seq >= 0 ? seq : nextSeq();\n            this.random = random >= 0 ? random : createRandom();\n            this.time = time >= 0 ? time : unixtime();\n            this.elems = [];\n            var type = sess.type();\n            switch (type) {\n                case SESSION_TYPE.GROUP:\n                    break;\n                case SESSION_TYPE.C2C:\n                default:\n                    break;\n            }\n\n\n        };\n        Msg.prototype.getSession = function () {\n            return this.sess;\n        };\n        Msg.prototype.getType = function () {\n            return this.subType;\n        };\n        Msg.prototype.getSubType = function () {\n            return this.subType;\n        };\n        Msg.prototype.getFromAccount = function () {\n            return this.fromAccount;\n        };\n        Msg.prototype.getFromAccountNick = function () {\n            return this.fromAccountNick;\n        };\n        Msg.prototype.getIsSend = function () {\n            return this.isSend;\n        };\n        Msg.prototype.getSeq = function () {\n            return this.seq;\n        };\n        Msg.prototype.getTime = function () {\n            return this.time;\n        };\n        Msg.prototype.getRandom = function () {\n            return this.random;\n        };\n        Msg.prototype.getElems = function () {\n            return this.elems;\n        };\n        Msg.prototype.getMsgUniqueId = function () {\n            return this.uniqueId;\n        };\n        //文本\n        Msg.prototype.addText = function (text) {\n            this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.TEXT, text));\n        };\n        //表情\n        Msg.prototype.addFace = function (face) {\n            this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.FACE, face));\n        };\n        //图片\n        Msg.prototype.addImage = function (image) {\n            this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.IMAGE, image));\n        };\n        //地理位置\n        Msg.prototype.addLocation = function (location) {\n            this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.LOCATION, location));\n        };\n        //文件\n        Msg.prototype.addFile = function (file) {\n            this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.FILE, file));\n        };\n        //自定义\n        Msg.prototype.addCustom = function (custom) {\n            this.addElem(new webim.Msg.Elem(MSG_ELEMENT_TYPE.CUSTOM, custom));\n        };\n        Msg.prototype.addElem = function (elem) {\n            this.elems.push(elem);\n        };\n        Msg.prototype.toHtml = function () {\n            var html = \"\";\n            for (var i in this.elems) {\n                var elem = this.elems[i];\n                html += elem.toHtml();\n            }\n            return html;\n        };\n\n        // class Msg.Elem\n        Msg.Elem = function (type, value) {\n            this.type = type;\n            this.content = value;\n        };\n        Msg.Elem.prototype.getType = function () {\n            return this.type;\n        };\n        Msg.Elem.prototype.getContent = function () {\n            return this.content;\n        };\n        Msg.Elem.prototype.toHtml = function () {\n            var html;\n            html = this.content.toHtml();\n            return html;\n        };\n\n        // class Msg.Elem.Text\n        Msg.Elem.Text = function (text) {\n            this.text = tool.xssFilter(text);\n        };\n        Msg.Elem.Text.prototype.getText = function () {\n            return this.text;\n        };\n        Msg.Elem.Text.prototype.toHtml = function () {\n            return this.text;\n        };\n\n        // class Msg.Elem.Face\n        Msg.Elem.Face = function (index, data) {\n            this.index = index;\n            this.data = data;\n        };\n        Msg.Elem.Face.prototype.getIndex = function () {\n            return this.index;\n        };\n        Msg.Elem.Face.prototype.getData = function () {\n            return this.data;\n        };\n        Msg.Elem.Face.prototype.toHtml = function () {\n            var faceUrl = null;\n            var index = emotionDataIndexs[this.data];\n            var emotion = emotions[index];\n            if (emotion && emotion[1]) {\n                faceUrl = emotion[1];\n            }\n            if (faceUrl) {\n                return \"<img src='\" + faceUrl + \"'/>\";\n            } else {\n                return this.data;\n            }\n        };\n\n        // 地理位置消息 class Msg.Elem.Location\n        Msg.Elem.Location = function (longitude, latitude, desc) {\n            this.latitude = latitude; //纬度\n            this.longitude = longitude; //经度\n            this.desc = desc; //描述\n        };\n        Msg.Elem.Location.prototype.getLatitude = function () {\n            return this.latitude;\n        };\n        Msg.Elem.Location.prototype.getLongitude = function () {\n            return this.longitude;\n        };\n        Msg.Elem.Location.prototype.getDesc = function () {\n            return this.desc;\n        };\n        Msg.Elem.Location.prototype.toHtml = function () {\n            return '经度=' + this.longitude + ',纬度=' + this.latitude + ',描述=' + this.desc;\n        };\n\n        //图片消息\n        // class Msg.Elem.Images\n        Msg.Elem.Images = function (imageId, format) {\n            this.UUID = imageId;\n            if (typeof format !== 'number') {\n                format = parseInt(IMAGE_FORMAT[format] || IMAGE_FORMAT['UNKNOWN'], 10);\n            }\n            this.ImageFormat = format;\n            this.ImageInfoArray = [];\n        };\n        Msg.Elem.Images.prototype.addImage = function (image) {\n            this.ImageInfoArray.push(image);\n        };\n        Msg.Elem.Images.prototype.toHtml = function () {\n            var smallImage = this.getImage(IMAGE_TYPE.SMALL);\n            var bigImage = this.getImage(IMAGE_TYPE.LARGE);\n            var oriImage = this.getImage(IMAGE_TYPE.ORIGIN);\n            if (!bigImage) {\n                bigImage = smallImage;\n            }\n            if (!oriImage) {\n                oriImage = smallImage;\n            }\n            return \"<img src='\" + smallImage.getUrl() + \"#\" + bigImage.getUrl() + \"#\" + oriImage.getUrl() + \"' style='CURSOR: hand' id='\" + this.getImageId() + \"' bigImgUrl='\" + bigImage.getUrl() + \"' onclick='imageClick(this)' />\";\n\n        };\n        Msg.Elem.Images.prototype.getImageId = function () {\n            return this.UUID;\n        };\n        Msg.Elem.Images.prototype.getImageFormat = function () {\n            return this.ImageFormat;\n        };\n        Msg.Elem.Images.prototype.getImage = function (type) {\n            for (var i in this.ImageInfoArray) {\n                if (this.ImageInfoArray[i].getType() == type) {\n                    return this.ImageInfoArray[i];\n                }\n            }\n            var img = null;\n            this.ImageInfoArray.forEach(function (image) {\n                if (image.getType() == type) {\n                    img = image;\n                }\n            })\n            return img;\n        };\n        // class Msg.Elem.Images.Image\n        Msg.Elem.Images.Image = function (type, size, width, height, url) {\n            this.type = type;\n            this.size = size;\n            this.width = width;\n            this.height = height;\n            this.url = url;\n        };\n        Msg.Elem.Images.Image.prototype.getType = function () {\n            return this.type;\n        };\n        Msg.Elem.Images.Image.prototype.getSize = function () {\n            return this.size;\n        };\n        Msg.Elem.Images.Image.prototype.getWidth = function () {\n            return this.width;\n        };\n        Msg.Elem.Images.Image.prototype.getHeight = function () {\n            return this.height;\n        };\n        Msg.Elem.Images.Image.prototype.getUrl = function () {\n            return this.url;\n        };\n\n        // class Msg.Elem.Sound\n        Msg.Elem.Sound = function (uuid, second, size, senderId, receiverId, downFlag, chatType) {\n            this.uuid = uuid; //文件id\n            this.second = second; //时长，单位：秒\n            this.size = size; //大小，单位：字节\n            this.senderId = senderId; //发送者\n            this.receiverId = receiverId; //接收方id\n            this.downFlag = downFlag; //下载标志位\n            this.busiId = chatType == SESSION_TYPE.C2C ? 2 : 1; //busi_id ( 1：群    2:C2C)\n\n            //根据不同情况拉取数据\n            //是否需要申请下载地址  0:到架平申请  1:到cos申请  2:不需要申请, 直接拿url下载\n            if (downFlag==2 && url!=null) {\n                this.downUrl= url;\n            } else {\n                if (this.downFlag !== undefined && this.busiId !== undefined) {\n                    getFileDownUrlV2(uuid, senderId, second, downFlag, receiverId, this.busiId, UPLOAD_RES_TYPE.SOUND);\n                } else {\n                    this.downUrl = getSoundDownUrl(uuid, senderId, second); //下载地址\n                }\n            }\n        };\n        Msg.Elem.Sound.prototype.getUUID = function () {\n            return this.uuid;\n        };\n        Msg.Elem.Sound.prototype.getSecond = function () {\n            return this.second;\n        };\n        Msg.Elem.Sound.prototype.getSize = function () {\n            return this.size;\n        };\n        Msg.Elem.Sound.prototype.getSenderId = function () {\n            return this.senderId;\n        };\n        Msg.Elem.Sound.prototype.getDownUrl = function () {\n            return this.downUrl;\n        };\n        Msg.Elem.Sound.prototype.toHtml = function () {\n            if (BROWSER_INFO.type == 'ie' && parseInt(BROWSER_INFO.ver) <= 8) {\n                return '[这是一条语音消息]demo暂不支持ie8(含)以下浏览器播放语音,语音URL:' + this.downUrl;\n            }\n            return '<audio id=\"uuid_' + this.uuid + '\" src=\"' + this.downUrl + '\" controls=\"controls\" onplay=\"onChangePlayAudio(this)\" preload=\"none\"></audio>';\n        };\n\n        // class Msg.Elem.File\n        Msg.Elem.File = function (uuid, name, size, senderId, receiverId, downFlag, chatType) {\n            this.uuid = uuid; //文件id\n            this.name = name; //文件名\n            this.size = size; //大小，单位：字节\n            this.senderId = senderId; //发送者\n            this.receiverId = receiverId; //接收方id\n            this.downFlag = downFlag; //下载标志位\n\n            this.busiId = chatType == SESSION_TYPE.C2C ? 2 : 1; //busi_id ( 1：群    2:C2C)\n            //根据不同情况拉取数据\n            //是否需要申请下载地址  0:到架平申请  1:到cos申请  2:不需要申请, 直接拿url下载\n            if (downFlag==2 && url!=null) {\n                this.downUrl= url;\n            } else {\n                if (downFlag !== undefined && busiId !== undefined) {\n                    getFileDownUrlV2(uuid, senderId, name, downFlag, receiverId, this.busiId, UPLOAD_RES_TYPE.FILE);\n                } else {\n                    this.downUrl = getFileDownUrl(uuid, senderId, name); //下载地址\n                }\n            }\n        };\n        Msg.Elem.File.prototype.getUUID = function () {\n            return this.uuid;\n        };\n        Msg.Elem.File.prototype.getName = function () {\n            return this.name;\n        };\n        Msg.Elem.File.prototype.getSize = function () {\n            return this.size;\n        };\n        Msg.Elem.File.prototype.getSenderId = function () {\n            return this.senderId;\n        };\n        Msg.Elem.File.prototype.getDownUrl = function () {\n            return this.downUrl;\n        };\n        Msg.Elem.File.prototype.getDownFlag = function () {\n            return this.downFlag;\n        };\n        Msg.Elem.File.prototype.toHtml = function () {\n            var fileSize, unitStr;\n            fileSize = this.size;\n            unitStr = \"Byte\";\n            if (this.size >= 1024) {\n                fileSize = Math.round(this.size / 1024);\n                unitStr = \"KB\";\n            }\n            return {\n                uuid: this.uuid,\n                name: this.name,\n                size: fileSize,\n                unitStr: unitStr\n            };\n        };\n\n        // class Msg.Elem.GroupTip 群提示消息对象\n        Msg.Elem.GroupTip = function (opType, opUserId, groupId, groupName, userIdList, userinfo) {\n            this.opType = opType; //操作类型\n            this.opUserId = opUserId; //操作者id\n            this.groupId = groupId; //群id\n            this.groupName = groupName; //群名称\n            this.userIdList = userIdList ? userIdList : []; //被操作的用户id列表\n            this.groupInfoList = []; //新的群资料信息，群资料变更时才有值\n            this.memberInfoList = []; //新的群成员资料信息，群成员资料变更时才有值\n            this.groupMemberNum = null; //群成员数，操作类型为加群或者退群时才有值\n            this.userinfo = userinfo ? userinfo : []; //被操作的用户信息列表列表\n        };\n        Msg.Elem.GroupTip.prototype.addGroupInfo = function (groupInfo) {\n            this.groupInfoList.push(groupInfo);\n        };\n        Msg.Elem.GroupTip.prototype.addMemberInfo = function (memberInfo) {\n            this.memberInfoList.push(memberInfo);\n        };\n        Msg.Elem.GroupTip.prototype.getOpType = function () {\n            return this.opType;\n        };\n        Msg.Elem.GroupTip.prototype.getOpUserId = function () {\n            return this.opUserId;\n        };\n        Msg.Elem.GroupTip.prototype.getGroupId = function () {\n            return this.groupId;\n        };\n        Msg.Elem.GroupTip.prototype.getGroupName = function () {\n            return this.groupName;\n        };\n        Msg.Elem.GroupTip.prototype.getUserIdList = function () {\n            return this.userIdList;\n        };\n        Msg.Elem.GroupTip.prototype.getUserInfo = function () {\n            return this.userinfo;\n        };\n        Msg.Elem.GroupTip.prototype.getGroupInfoList = function () {\n            return this.groupInfoList;\n        };\n        Msg.Elem.GroupTip.prototype.getMemberInfoList = function () {\n            return this.memberInfoList;\n        };\n        Msg.Elem.GroupTip.prototype.getGroupMemberNum = function () {\n            return this.groupMemberNum;\n        };\n        Msg.Elem.GroupTip.prototype.setGroupMemberNum = function (groupMemberNum) {\n            return this.groupMemberNum = groupMemberNum;\n        };\n        Msg.Elem.GroupTip.prototype.toHtml = function () {\n            var text = \"[群提示消息]\";\n            var maxIndex = GROUP_TIP_MAX_USER_COUNT - 1;\n            switch (this.opType) {\n                case GROUP_TIP_TYPE.JOIN: //加入群\n                    text += this.opUserId + \"邀请了\";\n                    for (var m in this.userIdList) {\n                        text += this.userIdList[m] + \",\";\n                        if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                            text += \"等\" + this.userIdList.length + \"人\";\n                            break;\n                        }\n                    }\n                    text += \"加入该群\";\n                    break;\n                case GROUP_TIP_TYPE.QUIT: //退出群\n                    text += this.opUserId + \"主动退出该群\";\n                    break;\n                case GROUP_TIP_TYPE.KICK: //踢出群\n                    text += this.opUserId + \"将\";\n                    for (var m in this.userIdList) {\n                        text += this.userIdList[m] + \",\";\n                        if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                            text += \"等\" + this.userIdList.length + \"人\";\n                            break;\n                        }\n                    }\n                    text += \"踢出该群\";\n                    break;\n                case GROUP_TIP_TYPE.SET_ADMIN: //设置管理员\n                    text += this.opUserId + \"将\";\n                    for (var m in this.userIdList) {\n                        text += this.userIdList[m] + \",\";\n                        if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                            text += \"等\" + this.userIdList.length + \"人\";\n                            break;\n                        }\n                    }\n                    text += \"设为管理员\";\n                    break;\n                case GROUP_TIP_TYPE.CANCEL_ADMIN: //取消管理员\n                    text += this.opUserId + \"取消\";\n                    for (var m in this.userIdList) {\n                        text += this.userIdList[m] + \",\";\n                        if (this.userIdList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                            text += \"等\" + this.userIdList.length + \"人\";\n                            break;\n                        }\n                    }\n                    text += \"的管理员资格\";\n                    break;\n\n\n                case GROUP_TIP_TYPE.MODIFY_GROUP_INFO: //群资料变更\n                    text += this.opUserId + \"修改了群资料：\";\n                    for (var m in this.groupInfoList) {\n                        var type = this.groupInfoList[m].getType();\n                        var value = this.groupInfoList[m].getValue();\n                        switch (type) {\n                            case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.FACE_URL:\n                                text += \"群头像为\" + value + \"; \";\n                                break;\n                            case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NAME:\n                                text += \"群名称为\" + value + \"; \";\n                                break;\n                            case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.OWNER:\n                                text += \"群主为\" + value + \"; \";\n                                break;\n                            case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NOTIFICATION:\n                                text += \"群公告为\" + value + \"; \";\n                                break;\n                            case GROUP_TIP_MODIFY_GROUP_INFO_TYPE.INTRODUCTION:\n                                text += \"群简介为\" + value + \"; \";\n                                break;\n                            default:\n                                text += \"未知信息为:type=\" + type + \",value=\" + value + \"; \";\n                                break;\n                        }\n                    }\n                    break;\n\n                case GROUP_TIP_TYPE.MODIFY_MEMBER_INFO: //群成员资料变更(禁言时间)\n                    text += this.opUserId + \"修改了群成员资料:\";\n                    for (var m in this.memberInfoList) {\n                        var userId = this.memberInfoList[m].getUserId();\n                        var shutupTime = this.memberInfoList[m].getShutupTime();\n                        text += userId + \": \";\n                        if (shutupTime != null && shutupTime !== undefined) {\n                            if (shutupTime == 0) {\n                                text += \"取消禁言; \";\n                            } else {\n                                text += \"禁言\" + shutupTime + \"秒; \";\n                            }\n                        } else {\n                            text += \" shutupTime为空\";\n                        }\n                        if (this.memberInfoList.length > GROUP_TIP_MAX_USER_COUNT && m == maxIndex) {\n                            text += \"等\" + this.memberInfoList.length + \"人\";\n                            break;\n                        }\n                    }\n                    break;\n\n                case GROUP_TIP_TYPE.READED: //消息已读\n                    /**/\n                    Log.info(\"消息已读同步\")\n                    break;\n                default:\n                    text += \"未知群提示消息类型：type=\" + this.opType;\n                    break;\n            }\n            return text;\n        };\n\n        // class Msg.Elem.GroupTip.GroupInfo，变更的群资料信息对象\n        Msg.Elem.GroupTip.GroupInfo = function (type, value) {\n            this.type = type; //群资料信息类型\n            this.value = value; //对应的值\n        };\n        Msg.Elem.GroupTip.GroupInfo.prototype.getType = function () {\n            return this.type;\n        };\n        Msg.Elem.GroupTip.GroupInfo.prototype.getValue = function () {\n            return this.value;\n        };\n\n        // class Msg.Elem.GroupTip.MemberInfo，变更的群成员资料信息对象\n        Msg.Elem.GroupTip.MemberInfo = function (userId, shutupTime) {\n            this.userId = userId; //群成员id\n            this.shutupTime = shutupTime; //群成员被禁言时间，0表示取消禁言，大于0表示被禁言时长，单位：秒\n        };\n        Msg.Elem.GroupTip.MemberInfo.prototype.getUserId = function () {\n            return this.userId;\n        };\n        Msg.Elem.GroupTip.MemberInfo.prototype.getShutupTime = function () {\n            return this.shutupTime;\n        };\n\n        // 自定义消息类型 class Msg.Elem.Custom\n        Msg.Elem.Custom = function (data, desc, ext) {\n            this.data = data; //数据\n            this.desc = desc; //描述\n            this.ext = ext; //扩展字段\n        };\n        Msg.Elem.Custom.prototype.getData = function () {\n            return this.data;\n        };\n        Msg.Elem.Custom.prototype.getDesc = function () {\n            return this.desc;\n        };\n        Msg.Elem.Custom.prototype.getExt = function () {\n            return this.ext;\n        };\n        Msg.Elem.Custom.prototype.toHtml = function () {\n            return this.data;\n        };\n\n        // singleton object MsgStore\n        var MsgStore = new function () {\n            var sessMap = {}; //跟所有用户或群的聊天记录MAP\n            var sessTimeline = []; //按时间降序排列的会话列表\n            msgCache = {}; //消息缓存，用于判重\n            //C2C\n            this.cookie = \"\"; //上一次拉取新c2c消息的cookie\n            this.syncFlag = 0; //上一次拉取新c2c消息的是否继续拉取标记\n\n            var visitSess = function (visitor) {\n                for (var i in sessMap) {\n                    visitor(sessMap[i]);\n                }\n            };\n            //消息查重\n            var checkDupMsg = function (msg) {\n                var dup = false;\n                var first_key = msg.sess._impl.skey;\n                var second_key = msg.isSend + msg.seq + msg.random;\n                var tempMsg = msgCache[first_key] && msgCache[first_key][second_key];\n                if (tempMsg) {\n                    dup = true;\n                }\n                if (msgCache[first_key]) {\n                    msgCache[first_key][second_key] = {\n                        time: msg.time\n                    };\n                } else {\n                    msgCache[first_key] = {};\n                    msgCache[first_key][second_key] = {\n                        time: msg.time\n                    };\n                }\n                return dup;\n            };\n\n            this.sessMap = function () {\n                return sessMap;\n            };\n            this.sessCount = function () {\n                return sessTimeline.length;\n            };\n            this.sessByTypeId = function (type, id) {\n                var skey = Session.skey(type, id);\n                if (skey === undefined || skey == null) return null;\n                return sessMap[skey];\n            };\n            this.delSessByTypeId = function (type, id) {\n                var skey = Session.skey(type, id);\n                if (skey === undefined || skey == null) return false;\n                if (sessMap[skey]) {\n                    delete sessMap[skey];\n                    delete msgCache[skey];\n                }\n                return true;\n            };\n            this.resetCookieAndSyncFlag = function () {\n                this.cookie = \"\";\n                this.syncFlag = 0;\n            };\n\n            //切换将当前会话的自动读取消息标志为isOn,重置其他会话的自动读取消息标志为false\n            this.setAutoRead = function (selSess, isOn, isResetAll) {\n                if (isResetAll)\n                    visitSess(function (s) {\n                        s._impl.isAutoRead = false;\n                    });\n                if (selSess) {\n                    selSess._impl.isAutoRead = isOn; //\n                    if (isOn) { //是否调用已读上报接口\n                        selSess._impl.unread = 0;\n\n                        if (selSess._impl.type == SESSION_TYPE.C2C) { //私聊消息已读上报\n                            var tmpC2CMsgReadedItem = [];\n                            tmpC2CMsgReadedItem.push(new C2CMsgReadedItem(selSess._impl.id, selSess._impl.time));\n                            //调用C2C消息已读上报接口\n                            proto_c2CMsgReaded(MsgStore.cookie,\n                                tmpC2CMsgReadedItem,\n                                function (resp) {\n                                    log.info(\"[setAutoRead]: c2CMsgReaded success\");\n                                },\n                                function (err) {\n                                    log.error(\"[setAutoRead}: c2CMsgReaded failed:\" + err.ErrorInfo);\n                                });\n                        } else if (selSess._impl.type == SESSION_TYPE.GROUP) { //群聊消息已读上报\n                            var tmpOpt = {\n                                'GroupId': selSess._impl.id,\n                                'MsgReadedSeq': selSess._impl.curMaxMsgSeq\n                            };\n                            //调用group消息已读上报接口\n                            proto_groupMsgReaded(tmpOpt,\n                                function (resp) {\n                                    log.info(\"groupMsgReaded success\");\n\n                                },\n                                function (err) {\n                                    log.error(\"groupMsgReaded failed:\" + err.ErrorInfo);\n\n                                });\n                        }\n                    }\n                }\n            };\n\n            this.c2CMsgReaded = function (opts, cbOk, cbErr) {\n                var tmpC2CMsgReadedItem = [];\n                tmpC2CMsgReadedItem.push(new C2CMsgReadedItem(opts.To_Account, opts.LastedMsgTime));\n                //调用C2C消息已读上报接口\n                proto_c2CMsgReaded(MsgStore.cookie,\n                    tmpC2CMsgReadedItem,\n                    function (resp) {\n                        if (cbOk) {\n                            log.info(\"c2CMsgReaded success\");\n                            cbOk(resp);\n                        }\n                    },\n                    function (err) {\n                        if (cbErr) {\n                            log.error(\"c2CMsgReaded failed:\" + err.ErrorInfo);\n                            cbErr(err);\n                        }\n                    });\n            };\n\n            this.addSession = function (sess) {\n                sessMap[sess._impl.skey] = sess;\n            };\n            this.delSession = function (sess) {\n                delete sessMap[sess._impl.skey];\n            };\n            this.clear = function () {\n                sessMap = {}; //跟所有用户或群的聊天记录MAP\n                sessTimeline = []; //按时间降序排列的会话列表\n                msgCache = {}; //消息缓存，用于判重\n                this.cookie = \"\"; //上一次拉取新c2c消息的cookie\n                this.syncFlag = 0; //上一次拉取新c2c消息的是否继续拉取标记\n            };\n            this.addMsg = function (msg, unread) {\n                if (checkDupMsg(msg)) return false;\n                var sess = msg.sess;\n                if (!sessMap[sess._impl.skey]) this.addSession(sess);\n                sess._impl_addMsg(msg, unread);\n                return true;\n            };\n            this.updateTimeline = function () {\n                var arr = new Array;\n                visitSess(function (sess) {\n                    arr.push(sess);\n                });\n                arr.sort(function (a, b) {\n                    return b.time - a.time;\n                });\n                sessTimeline = arr;\n            };\n        };\n        // singleton object MsgManager\n        var MsgManager = new function () {\n\n            var onMsgCallback = null; //新消息(c2c和group)回调\n\n            var onGroupInfoChangeCallback = null; //群资料变化回调\n            //收到新群系统消息回调列表\n            var onGroupSystemNotifyCallbacks = {\n                \"1\": null,\n                \"2\": null,\n                \"3\": null,\n                \"4\": null,\n                \"5\": null,\n                \"6\": null,\n                \"7\": null,\n                \"8\": null,\n                \"9\": null,\n                \"10\": null,\n                \"11\": null,\n                \"15\": null,\n                \"255\": null,\n                \"12\": null,\n            };\n            //监听好友系统通知函数\n            var onFriendSystemNotifyCallbacks = {\n                \"1\": null,\n                \"2\": null,\n                \"3\": null,\n                \"4\": null,\n                \"5\": null,\n                \"6\": null,\n                \"7\": null,\n                \"8\": null\n            };\n\n            var onProfileSystemNotifyCallbacks = {\n                \"1\": null\n            };\n\n            var onKickedEventCall = null;\n\n            var onMsgReadCallback = null;\n\n            //普通长轮询\n            var longPollingOn = false; //是否开启普通长轮询\n            var isLongPollingRequesting = false; //是否在长轮询ing\n            var notifySeq = 0; //c2c通知seq\n            var noticeSeq = 0; //群消息seq\n\n            //大群长轮询\n            var onBigGroupMsgCallback = null; //大群消息回调\n            var bigGroupLongPollingOn = false; //是否开启长轮询\n            var bigGroupLongPollingStartSeqMap = {}; //请求拉消息的起始seq(大群长轮询)\n            var bigGroupLongPollingHoldTime = 90; //客户端长轮询的超时时间，单位是秒(大群长轮询)\n            var bigGroupLongPollingKeyMap = null; //客户端加入群组后收到的的Key(大群长轮询)\n            var bigGroupLongPollingMsgMap = {}; //记录收到的群消息数\n\n            var onC2cEventCallbacks = {\n                \"92\": null, //消息已读通知,\n                \"96\": null\n            };;\n            var onAppliedDownloadUrl = null;\n\n\n            var getLostGroupMsgCount = 0; //补拉丢失的群消息次数\n            //我的群当前最大的seq\n            var myGroupMaxSeqs = {}; //用于补拉丢失的群消息\n\n            var groupSystemMsgsCache = {}; //群组系统消息缓存,用于判重\n\n            //设置长轮询开关\n            //isOn=true 开启\n            //isOn=false 停止\n            this.setLongPollingOn = function (isOn) {\n                longPollingOn = isOn;\n            };\n            this.getLongPollingOn = function () {\n                return longPollingOn;\n            };\n\n            //重置长轮询变量\n            this.resetLongPollingInfo = function () {\n                longPollingOn = false;\n                notifySeq = 0;\n                noticeSeq = 0;\n            };\n\n        //设置大群长轮询开关\n        //isOn=true 开启\n        //isOn=false 停止\n        this.setBigGroupLongPollingOn = function (isOn) {\n            bigGroupLongPollingOn = isOn;\n        };\n\n        //查看是否存在该轮询，防止多次入群\n        this.checkBigGroupLongPollingOn = function ( groupId ) {\n            return !!bigGroupLongPollingKeyMap[groupId]\n        };\n        //设置大群长轮询key\n        this.setBigGroupLongPollingKey = function (GroupId, key) {\n            bigGroupLongPollingKeyMap[GroupId] = key;\n        };\n        //重置大群长轮询变量\n        this.resetBigGroupLongPollingInfo = function ( groupId ) {\n            bigGroupLongPollingOn = false;\n            bigGroupLongPollingStartSeqMap[groupId] = 0;\n            bigGroupLongPollingKeyMap[groupId] = null;\n            bigGroupLongPollingMsgMap[groupId] = {};\n\n            bigGroupLongPollingStartSeqMap[groupId].delete();\n            bigGroupLongPollingKeyMap[groupId].delete();\n            bigGroupLongPollingMsgMap[groupId].delete();\n        };\n\n            //设置群消息数据条数\n            this.setBigGroupLongPollingMsgMap = function (groupId, count) {\n                var bigGroupLongPollingMsgCount = bigGroupLongPollingMsgMap[groupId];\n                if (bigGroupLongPollingMsgCount) {\n                    bigGroupLongPollingMsgCount = parseInt(bigGroupLongPollingMsgCount) + count;\n                    bigGroupLongPollingMsgMap[groupId] = bigGroupLongPollingMsgCount;\n                } else {\n                    bigGroupLongPollingMsgMap[groupId] = count;\n                }\n            };\n\n            //重置\n            this.clear = function () {\n\n                onGroupInfoChangeCallback = null;\n                onGroupSystemNotifyCallbacks = {\n                    \"1\": null, //申请加群请求（只有管理员会收到）\n                    \"2\": null, //申请加群被同意（只有申请人能够收到）\n                    \"3\": null, //申请加群被拒绝（只有申请人能够收到）\n                    \"4\": null, //被管理员踢出群(只有被踢者接收到)\n                    \"5\": null, //群被解散(全员接收)\n                    \"6\": null, //创建群(创建者接收)\n                    \"7\": null, //邀请加群(被邀请者接收)\n                    \"8\": null, //主动退群(主动退出者接收)\n                    \"9\": null, //设置管理员(被设置者接收)\n                    \"10\": null, //取消管理员(被取消者接收)\n                    \"11\": null, //群已被回收(全员接收)\n                    \"15\": null, //群已被回收(全员接收)\n                    \"255\": null, //用户自定义通知(默认全员接收)\n                    \"12\": null, //邀请加群(被邀请者需要同意)\n                };\n                onFriendSystemNotifyCallbacks = {\n                    \"1\": null, //好友表增加\n                    \"2\": null, //好友表删除\n                    \"3\": null, //未决增加\n                    \"4\": null, //未决删除\n                    \"5\": null, //黑名单增加\n                    \"6\": null, //黑名单删除\n                    \"7\": null, //未决已读上报\n                    \"8\": null //好友信息(备注，分组)变更\n                };\n                onProfileSystemNotifyCallbacks = {\n                    \"1\": null //资料修改\n                };\n                //重置普通长轮询参数\n                onMsgCallback = null;\n                longPollingOn = false;\n                notifySeq = 0; //c2c新消息通知seq\n                noticeSeq = 0; //group新消息seq\n\n            //重置大群长轮询参数\n            onBigGroupMsgCallback = null;\n            bigGroupLongPollingOn = false;\n            bigGroupLongPollingStartSeqMap = {};\n            bigGroupLongPollingKeyMap = {};\n            bigGroupLongPollingMsgMap = {};\n\n                groupSystemMsgsCache = {};\n\n                ipList = []; //文件下载地址\n                authkey = null; //文件下载票据\n                expireTime = null; //票据超时时间\n            };\n\n            //初始化文件下载ip和票据\n            var initIpAndAuthkey = function (cbOk, cbErr) {\n                proto_getIpAndAuthkey(function (resp) {\n                        ipList = resp.IpList;\n                        authkey = resp.AuthKey;\n                        expireTime = resp.ExpireTime;\n                        if (cbOk) cbOk(resp);\n                    },\n                    function (err) {\n                        log.error(\"initIpAndAuthkey failed:\" + err.ErrorInfo);\n                        if (cbErr) cbErr(err);\n                    }\n                );\n            };\n\n            //初始化我的群当前最大的seq，用于补拉丢失的群消息\n            var initMyGroupMaxSeqs = function (cbOk, cbErr) {\n                var opts = {\n                    'Member_Account': ctx.identifier,\n                    'Limit': 1000,\n                    'Offset': 0,\n                    'GroupBaseInfoFilter': [\n                        'NextMsgSeq'\n                    ]\n                };\n                proto_getJoinedGroupListHigh(opts, function (resp) {\n                        if (!resp.GroupIdList || resp.GroupIdList.length == 0) {\n                            log.info(\"initMyGroupMaxSeqs: 目前还没有加入任何群组\");\n                            if (cbOk) cbOk(resp);\n                            return;\n                        }\n                        for (var i = 0; i < resp.GroupIdList.length; i++) {\n                            var group_id = resp.GroupIdList[i].GroupId;\n                            var curMaxSeq = resp.GroupIdList[i].NextMsgSeq - 1;\n                            myGroupMaxSeqs[group_id] = curMaxSeq;\n                        }\n\n                        if (cbOk) cbOk(resp);\n\n                    },\n                    function (err) {\n                        log.error(\"initMyGroupMaxSeqs failed:\" + err.ErrorInfo);\n                        if (cbErr) cbErr(err);\n                    }\n                );\n            };\n\n            //补拉群消息\n            var getLostGroupMsgs = function (groupId, reqMsgSeq, reqMsgNumber) {\n                getLostGroupMsgCount++;\n                //发起一个拉群群消息请求\n                var tempOpts = {\n                    'GroupId': groupId,\n                    'ReqMsgSeq': reqMsgSeq,\n                    'ReqMsgNumber': reqMsgNumber\n                };\n                //发起一个拉群群消息请求\n                log.warn(\"第\" + getLostGroupMsgCount + \"次补齐群消息,参数=\" + JSON.stringify(tempOpts));\n                MsgManager.syncGroupMsgs(tempOpts);\n            };\n\n            //更新群当前最大消息seq\n            var updateMyGroupCurMaxSeq = function (groupId, msgSeq) {\n                //更新myGroupMaxSeqs中的群最大seq\n                var curMsgSeq = myGroupMaxSeqs[groupId]\n                if (curMsgSeq) { //如果存在，比较大小\n                    if (msgSeq > curMsgSeq) {\n                        myGroupMaxSeqs[groupId] = msgSeq;\n                    }\n                } else { //不存在，新增\n                    myGroupMaxSeqs[groupId] = msgSeq;\n                }\n            };\n\n            //添加群消息列表\n            var addGroupMsgList = function (msgs, new_group_msgs) {\n                for (var p in msgs) {\n                    var newGroupMsg = msgs[p];\n                    //发群消息时，长轮询接口会返回用户自己发的群消息\n                    //if(newGroupMsg.From_Account && newGroupMsg.From_Account!=ctx.identifier ){\n                    if (newGroupMsg.From_Account) {\n                        //false-不是主动拉取的历史消息\n                        //true-需要保存到sdk本地session,并且需要判重\n                        var msg = handlerGroupMsg(newGroupMsg, false, true);\n                        if (msg) { //不为空，加到新消息里\n                            new_group_msgs.push(msg);\n                        }\n                        //更新myGroupMaxSeqs中的群最大seq\n                        updateMyGroupCurMaxSeq(newGroupMsg.ToGroupId, newGroupMsg.MsgSeq);\n                    }\n                }\n                return new_group_msgs;\n            };\n\n            //处理收到的群普通和提示消息\n            var handlerOrdinaryAndTipC2cMsgs = function (eventType, groupMsgArray) {\n                var groupMsgMap = {}; //保存收到的C2c消息信息（群号，最小，最大消息seq，消息列表）\n                var new_group_msgs = [];\n                var minGroupMsgSeq = 99999999;\n                var maxGroupMsgSeq = -1;\n                for (var j in groupMsgArray) {\n\n                    var groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId];\n                    if (!groupMsgs) {\n                        groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId] = {\n                            \"min\": minGroupMsgSeq, //收到新消息最小seq\n                            \"max\": maxGroupMsgSeq, //收到新消息最大seq\n                            \"msgs\": [] //收到的新消息\n                        };\n                    }\n                    //更新长轮询的群NoticeSeq\n                    if (groupMsgArray[j].NoticeSeq > noticeSeq) {\n                        log.warn(\"noticeSeq=\" + noticeSeq + \",msgNoticeSeq=\" + groupMsgArray[j].NoticeSeq);\n                        noticeSeq = groupMsgArray[j].NoticeSeq;\n                    }\n                    groupMsgArray[j].Event = eventType;\n                    groupMsgMap[groupMsgArray[j].ToGroupId].msgs.push(groupMsgArray[j]); //新增一条消息\n                    if (groupMsgArray[j].MsgSeq < groupMsgs.min) { //记录最小的消息seq\n                        groupMsgMap[groupMsgArray[j].ToGroupId].min = groupMsgArray[j].MsgSeq;\n                    }\n                    if (groupMsgArray[j].MsgSeq > groupMsgs.max) { //记录最大的消息seq\n                        groupMsgMap[groupMsgArray[j].ToGroupId].max = groupMsgArray[j].MsgSeq;\n                    }\n                }\n\n                for (var groupId in groupMsgMap) {\n                    new_group_msgs = addGroupMsgList(groupMsgMap[groupId].msgs, new_group_msgs);\n                }\n                if (new_group_msgs.length) {\n                    MsgStore.updateTimeline();\n                }\n                if (onMsgCallback && new_group_msgs.length) onMsgCallback(new_group_msgs);\n\n            };\n\n            //处理收到的群普通和提示消息\n            var handlerOrdinaryAndTipGroupMsgs = function (eventType, groupMsgArray) {\n                var groupMsgMap = {}; //保存收到的群消息信息（群号，最小，最大消息seq，消息列表）\n                var new_group_msgs = [];\n                var minGroupMsgSeq = 99999999;\n                var maxGroupMsgSeq = -1;\n                for (var j in groupMsgArray) {\n\n                    var groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId];\n                    if (!groupMsgs) {\n                        groupMsgs = groupMsgMap[groupMsgArray[j].ToGroupId] = {\n                            \"min\": minGroupMsgSeq, //收到新消息最小seq\n                            \"max\": maxGroupMsgSeq, //收到新消息最大seq\n                            \"msgs\": [] //收到的新消息\n                        };\n                    }\n                    //更新长轮询的群NoticeSeq\n                    if (groupMsgArray[j].NoticeSeq > noticeSeq) {\n                        log.warn(\"noticeSeq=\" + noticeSeq + \",msgNoticeSeq=\" + groupMsgArray[j].NoticeSeq);\n                        noticeSeq = groupMsgArray[j].NoticeSeq;\n                    }\n                    groupMsgArray[j].Event = eventType;\n                    groupMsgMap[groupMsgArray[j].ToGroupId].msgs.push(groupMsgArray[j]); //新增一条消息\n                    if (groupMsgArray[j].MsgSeq < groupMsgs.min) { //记录最小的消息seq\n                        groupMsgMap[groupMsgArray[j].ToGroupId].min = groupMsgArray[j].MsgSeq;\n                    }\n                    if (groupMsgArray[j].MsgSeq > groupMsgs.max) { //记录最大的消息seq\n                        groupMsgMap[groupMsgArray[j].ToGroupId].max = groupMsgArray[j].MsgSeq;\n                    }\n                }\n\n                for (var groupId in groupMsgMap) {\n                    new_group_msgs = addGroupMsgList(groupMsgMap[groupId].msgs, new_group_msgs);\n                }\n                if (new_group_msgs.length) {\n                    MsgStore.updateTimeline();\n                }\n                if (onMsgCallback && new_group_msgs.length) onMsgCallback(new_group_msgs);\n\n            };\n\n            //处理新的群提示消息\n            var handlerGroupTips = function (groupTips) {\n                var new_group_msgs = [];\n                for (var o in groupTips) {\n                    var groupTip = groupTips[o];\n                    //添加event字段\n                    groupTip.Event = LONG_POLLINNG_EVENT_TYPE.GROUP_TIP;\n                    //更新群消息通知seq\n                    if (groupTip.NoticeSeq > noticeSeq) {\n                        noticeSeq = groupTip.NoticeSeq;\n                    }\n                    var msg = handlerGroupMsg(groupTip, false, true);\n                    if (msg) {\n                        new_group_msgs.push(msg);\n                    }\n                }\n                if (new_group_msgs.length) {\n                    MsgStore.updateTimeline();\n                }\n                if (onMsgCallback && new_group_msgs.length) onMsgCallback(new_group_msgs);\n            };\n\n            //处理新的群系统消息\n            //isNeedValidRepeatMsg 是否需要判重\n            var handlerGroupSystemMsgs = function (groupSystemMsgs, isNeedValidRepeatMsg) {\n                for (var k in groupSystemMsgs) {\n                    var groupTip = groupSystemMsgs[k];\n                    var groupReportTypeMsg = groupTip.MsgBody;\n                    var reportType = groupReportTypeMsg.ReportType;\n                    //当长轮询返回的群系统消息，才需要更新群消息通知seq\n                    if (isNeedValidRepeatMsg == false && groupTip.NoticeSeq && groupTip.NoticeSeq > noticeSeq) {\n                        noticeSeq = groupTip.NoticeSeq;\n                    }\n                    var toAccount = groupTip.GroupInfo.To_Account;\n                    //过滤本不应该给自己的系统消息\n                    /*if (!toAccount || toAccount != ctx.identifier) {\n                 log.error(\"收到本不应该给自己的系统消息: To_Account=\" + toAccount);\n                 continue;\n                 }*/\n                    if (isNeedValidRepeatMsg) {\n                        //var key=groupTip.ToGroupId+\"_\"+reportType+\"_\"+groupTip.MsgTimeStamp+\"_\"+groupReportTypeMsg.Operator_Account;\n                        var key = groupTip.ToGroupId + \"_\" + reportType + \"_\" + groupReportTypeMsg.Operator_Account;\n                        var isExist = groupSystemMsgsCache[key];\n                        if (isExist) {\n                            log.warn(\"收到重复的群系统消息：key=\" + key);\n                            continue;\n                        }\n                        groupSystemMsgsCache[key] = true;\n                    }\n\n                    var notify = {\n                        \"SrcFlag\": 0,\n                        \"ReportType\": reportType,\n                        \"GroupId\": groupTip.ToGroupId,\n                        \"GroupName\": groupTip.GroupInfo.GroupName,\n                        \"Operator_Account\": groupReportTypeMsg.Operator_Account,\n                        \"MsgTime\": groupTip.MsgTimeStamp,\n                        \"groupReportTypeMsg\": groupReportTypeMsg\n                    };\n                    switch (reportType) {\n                        case GROUP_SYSTEM_TYPE.JOIN_GROUP_REQUEST: //申请加群(只有管理员会接收到)\n                            notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                            notify[\"MsgKey\"] = groupReportTypeMsg.MsgKey;\n                            notify[\"Authentication\"] = groupReportTypeMsg.Authentication;\n                            notify[\"UserDefinedField\"] = groupTip.UserDefinedField;\n                            notify[\"From_Account\"] = groupTip.From_Account;\n                            notify[\"MsgSeq\"] = groupTip.ClientSeq;\n                            notify[\"MsgRandom\"] = groupTip.MsgRandom;\n                            break;\n                        case GROUP_SYSTEM_TYPE.JOIN_GROUP_ACCEPT: //申请加群被同意(只有申请人自己接收到)\n                        case GROUP_SYSTEM_TYPE.JOIN_GROUP_REFUSE: //申请加群被拒绝(只有申请人自己接收到)\n                            notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                            break;\n                        case GROUP_SYSTEM_TYPE.KICK: //被管理员踢出群(只有被踢者接收到)\n                        case GROUP_SYSTEM_TYPE.DESTORY: //群被解散(全员接收)\n                        case GROUP_SYSTEM_TYPE.CREATE: //创建群(创建者接收, 不展示)\n                        case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST: //邀请加群(被邀请者接收)\n                        case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST_AGREE: //邀请加群(被邀请者需同意)\n                        case GROUP_SYSTEM_TYPE.QUIT: //主动退群(主动退出者接收, 不展示)\n                        case GROUP_SYSTEM_TYPE.SET_ADMIN: //群设置管理员(被设置者接收)\n                        case GROUP_SYSTEM_TYPE.CANCEL_ADMIN: //取消管理员(被取消者接收)\n                        case GROUP_SYSTEM_TYPE.REVOKE: //群已被回收(全员接收, 不展示)\n                            break;\n                        case GROUP_SYSTEM_TYPE.READED: //群消息已读同步\n                            break;\n                        case GROUP_SYSTEM_TYPE.CUSTOM: //用户自定义通知(默认全员接收)\n                            notify[\"MsgSeq\"] = groupTip.MsgSeq;\n                            notify[\"UserDefinedField\"] = groupReportTypeMsg.UserDefinedField;\n                            break;\n                        default:\n                            log.error(\"未知群系统消息类型：reportType=\" + reportType);\n                            break;\n                    }\n\n                    if (isNeedValidRepeatMsg) {\n                        //注释只收取一种通知\n                        // if (reportType == GROUP_SYSTEM_TYPE.JOIN_GROUP_REQUEST) {\n                        //回调\n                        if (onGroupSystemNotifyCallbacks[reportType]) {\n                            onGroupSystemNotifyCallbacks[reportType](notify);\n                        } else {\n                            log.error(\"未知群系统消息类型：reportType=\" + reportType);\n                        }\n                        //}\n                    } else {\n                        //回调\n                        if (onGroupSystemNotifyCallbacks[reportType]) {\n                            if (reportType == GROUP_SYSTEM_TYPE.READED) {\n                                var arr = notify.groupReportTypeMsg.GroupReadInfoArray;\n                                for (var i = 0, l = arr.length; i < l; i++) {\n                                    var item = arr[i];\n                                    onGroupSystemNotifyCallbacks[reportType](item);\n                                }\n                            } else {\n                                onGroupSystemNotifyCallbacks[reportType](notify);\n                            }\n                        }\n                    }\n                } //loop\n            };\n\n\n            //处理新的好友系统通知\n            //isNeedValidRepeatMsg 是否需要判重\n            var handlerFriendSystemNotices = function (friendSystemNotices, isNeedValidRepeatMsg) {\n                var friendNotice, type, notify;\n                for (var k in friendSystemNotices) {\n                    friendNotice = friendSystemNotices[k];\n                    type = friendNotice.PushType;\n                    //当长轮询返回的群系统消息，才需要更新通知seq\n                    if (isNeedValidRepeatMsg == false && friendNotice.NoticeSeq && friendNotice.NoticeSeq > noticeSeq) {\n                        noticeSeq = friendNotice.NoticeSeq;\n                    }\n                    notify = {\n                        'Type': type\n                    };\n                    switch (type) {\n                        case FRIEND_NOTICE_TYPE.FRIEND_ADD: //好友表增加\n                            notify[\"Accounts\"] = friendNotice.FriendAdd_Account;\n                            break;\n                        case FRIEND_NOTICE_TYPE.FRIEND_DELETE: //好友表删除\n                            notify[\"Accounts\"] = friendNotice.FriendDel_Account;\n                            break;\n                        case FRIEND_NOTICE_TYPE.PENDENCY_ADD: //未决增加\n                            notify[\"PendencyList\"] = friendNotice.PendencyAdd;\n                            break;\n                        case FRIEND_NOTICE_TYPE.PENDENCY_DELETE: //未决删除\n                            notify[\"Accounts\"] = friendNotice.FrienPencydDel_Account;\n                            break;\n                        case FRIEND_NOTICE_TYPE.BLACK_LIST_ADD: //黑名单增加\n                            notify[\"Accounts\"] = friendNotice.BlackListAdd_Account;\n                            break;\n                        case FRIEND_NOTICE_TYPE.BLACK_LIST_DELETE: //黑名单删除\n                            notify[\"Accounts\"] = friendNotice.BlackListDel_Account;\n                            break;\n                            /*case FRIEND_NOTICE_TYPE.PENDENCY_REPORT://未决已读上报\n\n                     break;\n                     case FRIEND_NOTICE_TYPE.FRIEND_UPDATE://好友数据更新\n\n                     break;\n                     */\n                        default:\n                            log.error(\"未知好友系统通知类型：friendNotice=\" + JSON.stringify(friendNotice));\n                            break;\n                    }\n\n                    if (isNeedValidRepeatMsg) {\n                        if (type == FRIEND_NOTICE_TYPE.PENDENCY_ADD) {\n                            //回调\n                            if (onFriendSystemNotifyCallbacks[type]) onFriendSystemNotifyCallbacks[type](notify);\n                        }\n                    } else {\n                        //回调\n                        if (onFriendSystemNotifyCallbacks[type]) onFriendSystemNotifyCallbacks[type](notify);\n                    }\n                } //loop\n            };\n\n            //处理新的资料系统通知\n            //isNeedValidRepeatMsg 是否需要判重\n            var handlerProfileSystemNotices = function (profileSystemNotices, isNeedValidRepeatMsg) {\n                var profileNotice, type, notify;\n                for (var k in profileSystemNotices) {\n                    profileNotice = profileSystemNotices[k];\n                    type = profileNotice.PushType;\n                    //当长轮询返回的群系统消息，才需要更新通知seq\n                    if (isNeedValidRepeatMsg == false && profileNotice.NoticeSeq && profileNotice.NoticeSeq > noticeSeq) {\n                        noticeSeq = profileNotice.NoticeSeq;\n                    }\n                    notify = {\n                        'Type': type\n                    };\n                    switch (type) {\n                        case PROFILE_NOTICE_TYPE.PROFILE_MODIFY: //资料修改\n                            notify[\"Profile_Account\"] = profileNotice.Profile_Account;\n                            notify[\"ProfileList\"] = profileNotice.ProfileList;\n                            break;\n                        default:\n                            log.error(\"未知资料系统通知类型：profileNotice=\" + JSON.stringify(profileNotice));\n                            break;\n                    }\n\n                    if (isNeedValidRepeatMsg) {\n                        if (type == PROFILE_NOTICE_TYPE.PROFILE_MODIFY) {\n                            //回调\n                            if (onProfileSystemNotifyCallbacks[type]) onProfileSystemNotifyCallbacks[type](notify);\n                        }\n                    } else {\n                        //回调\n                        if (onProfileSystemNotifyCallbacks[type]) onProfileSystemNotifyCallbacks[type](notify);\n                    }\n                } //loop\n            };\n\n            //处理新的群系统消息(用于直播大群长轮询)\n            var handlerGroupSystemMsg = function (groupTip) {\n                var groupReportTypeMsg = groupTip.MsgBody;\n                var reportType = groupReportTypeMsg.ReportType;\n                var toAccount = groupTip.GroupInfo.To_Account;\n                //过滤本不应该给自己的系统消息\n                //if(!toAccount || toAccount!=ctx.identifier){\n                //    log.error(\"收到本不应该给自己的系统消息: To_Account=\"+toAccount);\n                //    continue;\n                //}\n                var notify = {\n                    \"SrcFlag\": 1,\n                    \"ReportType\": reportType,\n                    \"GroupId\": groupTip.ToGroupId,\n                    \"GroupName\": groupTip.GroupInfo.GroupName,\n                    \"Operator_Account\": groupReportTypeMsg.Operator_Account,\n                    \"MsgTime\": groupTip.MsgTimeStamp\n                };\n                switch (reportType) {\n                    case GROUP_SYSTEM_TYPE.JOIN_GROUP_REQUEST: //申请加群(只有管理员会接收到)\n                        notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                        notify[\"MsgKey\"] = groupReportTypeMsg.MsgKey;\n                        notify[\"Authentication\"] = groupReportTypeMsg.Authentication;\n                        notify[\"UserDefinedField\"] = groupTip.UserDefinedField;\n                        notify[\"From_Account\"] = groupTip.From_Account;\n                        notify[\"MsgSeq\"] = groupTip.ClientSeq;\n                        notify[\"MsgRandom\"] = groupTip.MsgRandom;\n                        break;\n                    case GROUP_SYSTEM_TYPE.JOIN_GROUP_ACCEPT: //申请加群被同意(只有申请人自己接收到)\n                    case GROUP_SYSTEM_TYPE.JOIN_GROUP_REFUSE: //申请加群被拒绝(只有申请人自己接收到)\n                        notify[\"RemarkInfo\"] = groupReportTypeMsg.RemarkInfo;\n                        break;\n                    case GROUP_SYSTEM_TYPE.KICK: //被管理员踢出群(只有被踢者接收到)\n                    case GROUP_SYSTEM_TYPE.DESTORY: //群被解散(全员接收)\n                    case GROUP_SYSTEM_TYPE.CREATE: //创建群(创建者接收, 不展示)\n                    case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST: //邀请加群(被邀请者接收)\n                    case GROUP_SYSTEM_TYPE.INVITED_JOIN_GROUP_REQUEST_AGREE: //邀请加群(被邀请者需要同意)\n                    case GROUP_SYSTEM_TYPE.QUIT: //主动退群(主动退出者接收, 不展示)\n                    case GROUP_SYSTEM_TYPE.SET_ADMIN: //群设置管理员(被设置者接收)\n                    case GROUP_SYSTEM_TYPE.CANCEL_ADMIN: //取消管理员(被取消者接收)\n                    case GROUP_SYSTEM_TYPE.REVOKE: //群已被回收(全员接收, 不展示)\n                        break;\n                    case GROUP_SYSTEM_TYPE.CUSTOM: //用户自定义通知(默认全员接收)\n                        notify[\"MsgSeq\"] = groupTip.MsgSeq;\n                        notify[\"UserDefinedField\"] = groupReportTypeMsg.UserDefinedField;\n                        break;\n                    default:\n                        log.error(\"未知群系统消息类型：reportType=\" + reportType);\n                        break;\n                }\n                //回调\n                if (onGroupSystemNotifyCallbacks[reportType]) onGroupSystemNotifyCallbacks[reportType](notify);\n\n            };\n\n            //处理C2C EVENT 消息通道Array\n            var handlerC2cNotifyMsgArray = function (arr) {\n                for (var i = 0, l = arr.length; i < l; i++) {\n                    handlerC2cEventMsg(arr[i]);\n                }\n            }\n\n            //处理C2C EVENT 消息通道Item\n            var handlerC2cEventMsg = function (notify) {\n                var subType = notify.SubMsgType;\n                switch (subType) {\n                    case C2C_EVENT_SUB_TYPE.READED:\n                        log.warn(\"C2C已读消息通知\");\n                        if (notify.ReadC2cMsgNotify && notify.ReadC2cMsgNotify.UinPairReadArray && onC2cEventCallbacks[subType]) {\n                            for (var i = 0, l = notify.ReadC2cMsgNotify.UinPairReadArray.length; i < l; i++) {\n                                var item = notify.ReadC2cMsgNotify.UinPairReadArray[i];\n                                onC2cEventCallbacks[subType](item);\n                            }\n                        }\n                        break;\n                    case C2C_EVENT_SUB_TYPE.KICKEDOUT:\n                        log.warn(\"多终端互踢通知\");\n                        proto_logout('instance');\n                        if (onC2cEventCallbacks[subType]) {\n                            onC2cEventCallbacks[subType]();\n                        }\n                        break;\n                    default:\n                        log.error(\"未知C2c系统消息：subType=\" + subType);\n                        break;\n                }\n\n            };\n\n            //长轮询\n            this.longPolling = function (cbOk, cbErr) {\n\n\n                var opts = {\n                    'Timeout': longPollingDefaultTimeOut / 1000,\n                    'Cookie': {\n                        'NotifySeq': notifySeq,\n                        'NoticeSeq': noticeSeq\n                    }\n                };\n                if (LongPollingId) {\n                    opts.Cookie.LongPollingId = LongPollingId;\n                    doPolling();\n                } else {\n                    proto_getLongPollingId({}, function (resp) {\n                        LongPollingId = opts.Cookie.LongPollingId = resp.LongPollingId;\n                        //根据回包设置超时时间，超时时长不能>60秒，因为webkit手机端的最长超时时间不能大于60s\n                        longPollingDefaultTimeOut = resp.Timeout > 60 ? longPollingDefaultTimeOut : resp.Timeout * 1000;\n                        doPolling();\n                    });\n                }\n\n                function doPolling() {\n                    proto_longPolling(opts, function (resp) {\n                        for (var i in resp.EventArray) {\n                            var e = resp.EventArray[i];\n                            switch (e.Event) {\n                                case LONG_POLLINNG_EVENT_TYPE.C2C: //c2c消息通知\n                                    //更新C2C消息通知seq\n                                    notifySeq = e.NotifySeq;\n                                    log.warn(\"longpolling: received new c2c msg\");\n                                    //获取新消息\n                                    MsgManager.syncMsgs();\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.GROUP_COMMON: //普通群消息通知\n                                    log.warn(\"longpolling: received new group msgs\");\n                                    handlerOrdinaryAndTipGroupMsgs(e.Event, e.GroupMsgArray);\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP: //（全员广播）群提示消息\n                                    log.warn(\"longpolling: received new group tips\");\n                                    handlerOrdinaryAndTipGroupMsgs(e.Event, e.GroupTips);\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP2: //群提示消息\n                                    log.warn(\"longpolling: received new group tips\");\n                                    handlerOrdinaryAndTipGroupMsgs(e.Event, e.GroupTips);\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.GROUP_SYSTEM: //（多终端同步）群系统消息\n                                    log.warn(\"longpolling: received new group system msgs\");\n                                    //false 表示 通过长轮询收到的群系统消息，可以不判重\n                                    handlerGroupSystemMsgs(e.GroupTips, false);\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.FRIEND_NOTICE: //好友系统通知\n                                    log.warn(\"longpolling: received new friend system notice\");\n                                    //false 表示 通过长轮询收到的好友系统通知，可以不判重\n                                    handlerFriendSystemNotices(e.FriendListMod, false);\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.PROFILE_NOTICE: //资料系统通知\n                                    log.warn(\"longpolling: received new profile system notice\");\n                                    //false 表示 通过长轮询收到的资料系统通知，可以不判重\n                                    handlerProfileSystemNotices(e.ProfileDataMod, false);\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.C2C_COMMON: //c2c消息通知\n                                    noticeSeq = e.C2cMsgArray[0].NoticeSeq;\n                                    //更新C2C消息通知seq\n                                    log.warn(\"longpolling: received new c2c_common msg\", noticeSeq);\n                                    handlerOrdinaryAndTipC2cMsgs(e.Event, e.C2cMsgArray);\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.C2C_EVENT: //c2c已读消息通知\n                                    noticeSeq = e.C2cNotifyMsgArray[0].NoticeSeq;\n                                    log.warn(\"longpolling: received new c2c_event msg\");\n                                    handlerC2cNotifyMsgArray(e.C2cNotifyMsgArray);\n                                    break;\n                                default:\n                                    log.error(\"longpolling收到未知新消息类型: Event=\" + e.Event);\n                                    break;\n                            }\n                        }\n                        var successInfo = {\n                            'ActionStatus': ACTION_STATUS.OK,\n                            'ErrorCode': 0\n                        };\n                        updatecLongPollingStatus(successInfo);\n                    }, function (err) {\n                        //log.error(err);\n                        updatecLongPollingStatus(err);\n                        if (cbErr) cbErr(err);\n                    });\n                }\n            };\n\n\n        //大群 长轮询\n        this.bigGroupLongPolling = function (GroupId, cbOk, cbErr) {\n            // if( !GroupId ){\n            //     for(var a in bigGroupLongPollingMsgMap){\n            //         this.bigGroupLongPolling( a )\n            //     }\n            //     return;\n            // }\n            // var GroupId = BigGroupId;\n            var opts = {\n                'USP': 1,\n                'StartSeq': bigGroupLongPollingStartSeqMap[GroupId], //请求拉消息的起始seq\n                'HoldTime': bigGroupLongPollingHoldTime, //客户端长轮询的超时时间，单位是秒\n                'Key': bigGroupLongPollingKeyMap[GroupId] //客户端加入群组后收到的的Key\n                };\n\n                proto_bigGroupLongPolling(opts, function (resp) {\n                // if (GroupId != BigGroupId) return;\n                    var msgObjList = [];\n                bigGroupLongPollingStartSeqMap[GroupId] = resp.NextSeq;\n                bigGroupLongPollingHoldTime = resp.HoldTime;\n                bigGroupLongPollingKeyMap[GroupId] = resp.Key;\n\n                    if (resp.RspMsgList && resp.RspMsgList.length > 0) {\n                        var msgCount = 0,\n                            msgInfo, event, msg;\n                        for (var i = resp.RspMsgList.length - 1; i >= 0; i--) {\n                            msgInfo = resp.RspMsgList[i];\n                            //后台这里做了调整，缩短字段名，以下是兼容代码\n                            var keyMap = {\n                                \"F_Account\": \"From_Account\",\n                                \"T_Account\": \"To_Account\",\n                                \"FAType\": \"EnumFrom_AccountType\",\n                                \"TAType\": \"EnumTo_AccountType\",\n                                \"GCode\": \"GroupCode\",\n                                \"GName\": \"GroupName\",\n                                \"GId\": \"GroupId\",\n                                \"MFlg\": \"MsgFlag\",\n                                \"FAEInfo\": \"MsgFrom_AccountExtraInfo\",\n                                \"Evt\": \"Event\",\n                                \"GInfo\": \"GroupInfo\",\n                                \"BPlc\": \"IsPlaceMsg\",\n                                \"MBody\": \"MsgBody\",\n                                \"Pri\": \"MsgPriority\",\n                                \"Rdm\": \"MsgRandom\",\n                                \"MSeq\": \"MsgSeq\",\n                                \"TStp\": \"MsgTimeStamp\",\n                                \"TGId\": \"ToGroupId\",\n                                \"UEInfo\": \"UinExtInfo\",\n                                \"UId\": \"UserId\",\n                                \"BSys\": \"IsSystemMsg\",\n                                \"FAHUrl\": \"From_AccountHeadurl\",\n                                \"FANick\": \"From_AccountNick\"\n                            };\n                            msgInfo = tool.replaceObject(keyMap, msgInfo);\n                            //如果是已经删除的消息或者发送者帐号为空或者消息内容为空\n                            //IsPlaceMsg=1\n                            if (msgInfo.IsPlaceMsg || !msgInfo.From_Account || !msgInfo.MsgBody || msgInfo.MsgBody.length == 0) {\n                                continue;\n                            }\n\n                            event = msgInfo.Event; //群消息类型\n                            switch (event) {\n                                case LONG_POLLINNG_EVENT_TYPE.GROUP_COMMON: //群普通消息\n                                    log.info(\"bigGroupLongPolling: return new group msg\");\n                                    msg = handlerGroupMsg(msgInfo, false, false);\n                                    msg && msgObjList.push(msg);\n                                    msgCount = msgCount + 1;\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP: //群提示消息\n                                case LONG_POLLINNG_EVENT_TYPE.GROUP_TIP2: //群提示消息\n                                    log.info(\"bigGroupLongPolling: return new group tip\");\n                                    msg = handlerGroupMsg(msgInfo, false, false);\n                                    msg && msgObjList.push(msg);\n                                    //msgCount=msgCount+1;\n                                    break;\n                                case LONG_POLLINNG_EVENT_TYPE.GROUP_SYSTEM: //群系统消息\n                                    log.info(\"bigGroupLongPolling: new group system msg\");\n                                    handlerGroupSystemMsg(msgInfo);\n                                    break;\n                                default:\n                                    log.error(\"bigGroupLongPolling收到未知新消息类型: Event=\" + event);\n                                    break;\n                            }\n                        } // for loop\n                        if (msgCount > 0) {\n                            MsgManager.setBigGroupLongPollingMsgMap(msgInfo.ToGroupId, msgCount); //\n                            log.warn(\"current bigGroupLongPollingMsgMap: \" + JSON.stringify(bigGroupLongPollingMsgMap));\n                        }\n                    }\n                    curBigGroupLongPollingRetErrorCount = 0;\n                    //返回连接状态\n                    var successInfo = {\n                        'ActionStatus': ACTION_STATUS.OK,\n                        'ErrorCode': CONNECTION_STATUS.ON,\n                        'ErrorInfo': 'connection is ok...'\n                    };\n                    ConnManager.callBack(successInfo);\n\n                    if (cbOk) cbOk(msgObjList);\n                    else if (onBigGroupMsgCallback) onBigGroupMsgCallback(msgObjList); //返回新消息\n\n                    //重新启动长轮询\n                bigGroupLongPollingOn && MsgManager.bigGroupLongPolling( GroupId );\n\n                }, function (err) {\n                    if (err.ErrorCode == longPollingPackageTooLargeErrorCode) {\n                    bigGroupLongPollingStartSeqMap[GroupId] = 0;\n                    } else if (err.ErrorCode != longPollingTimeOutErrorCode) {\n                        log.error(err.ErrorInfo);\n                        //记录长轮询返回错误次数\n                        curBigGroupLongPollingRetErrorCount++;\n                    }\n                    if (err.ErrorCode == longPollingKickedErrorCode) {\n                        //登出\n                        log.error(\"多实例登录，被kick\");\n                        if (onKickedEventCall) {\n                            onKickedEventCall();\n                        }\n                    }\n                    bigGroupLongPollingOn && MsgManager.bigGroupLongPolling( GroupId );\n                    //累计超过一定次数，不再发起长轮询请求 - 去掉轮询次数限制的逻辑 SaxonGao\n                    // if (curBigGroupLongPollingRetErrorCount < LONG_POLLING_MAX_RET_ERROR_COUNT) {\n                    //     bigGroupLongPollingOn && MsgManager.bigGroupLongPolling( GroupId );\n                    // } else {\n                    //     var errInfo = {\n                    //         'ActionStatus': ACTION_STATUS.FAIL,\n                    //         'ErrorCode': CONNECTION_STATUS.OFF,\n                    //         'ErrorInfo': 'connection is off'\n                    //     };\n                    //     ConnManager.callBack(errInfo);\n                    // }\n                    if (cbErr) cbErr(err);\n\n                }, bigGroupLongPollingHoldTime * 1000);\n            };\n\n            //更新连接状态\n            var updatecLongPollingStatus = function (errObj) {\n                if (errObj.ErrorCode == 0 || errObj.ErrorCode == longPollingTimeOutErrorCode) {\n                    curLongPollingRetErrorCount = 0;\n                    longPollingOffCallbackFlag = false;\n                    var errorInfo;\n                    var isNeedCallback = false;\n                    switch (curLongPollingStatus) {\n                        case CONNECTION_STATUS.INIT:\n                            isNeedCallback = true;\n                            curLongPollingStatus = CONNECTION_STATUS.ON;\n                            errorInfo = \"create connection successfully(INIT->ON)\";\n                            break;\n                        case CONNECTION_STATUS.ON:\n                            errorInfo = \"connection is on...(ON->ON)\";\n                            break;\n                        case CONNECTION_STATUS.RECONNECT:\n                            curLongPollingStatus = CONNECTION_STATUS.ON;\n                            errorInfo = \"connection is on...(RECONNECT->ON)\";\n                            break;\n                        case CONNECTION_STATUS.OFF:\n                            isNeedCallback = true;\n                            curLongPollingStatus = CONNECTION_STATUS.RECONNECT;\n                            errorInfo = \"reconnect successfully(OFF->RECONNECT)\";\n                            break;\n                    }\n                    var successInfo = {\n                        'ActionStatus': ACTION_STATUS.OK,\n                        'ErrorCode': curLongPollingStatus,\n                        'ErrorInfo': errorInfo\n                    };\n                    isNeedCallback && ConnManager.callBack(successInfo);\n                    longPollingOn && MsgManager.longPolling();\n                } else if (errObj.ErrorCode == longPollingKickedErrorCode) {\n                    //登出\n                    log.error(\"多实例登录，被kick\");\n                    if (onKickedEventCall) {\n                        onKickedEventCall();\n                    }\n                } else {\n                    //记录长轮询返回解析json错误次数\n                    curLongPollingRetErrorCount++;\n                    log.warn(\"longPolling接口第\" + curLongPollingRetErrorCount + \"次报错: \" + errObj.ErrorInfo);\n                    //累计超过一定次数\n                    if (curLongPollingRetErrorCount <= LONG_POLLING_MAX_RET_ERROR_COUNT) {\n                        setTimeout(startNextLongPolling, 100); //\n                    } else {\n                        curLongPollingStatus = CONNECTION_STATUS.OFF;\n                        var errInfo = {\n                            'ActionStatus': ACTION_STATUS.FAIL,\n                            'ErrorCode': CONNECTION_STATUS.OFF,\n                            'ErrorInfo': 'connection is off'\n                        };\n                        longPollingOffCallbackFlag == false && ConnManager.callBack(errInfo);\n                        longPollingOffCallbackFlag = true;\n                        log.warn(longPollingIntervalTime + \"毫秒之后,SDK会发起新的longPolling请求...\");\n                        setTimeout(startNextLongPolling, longPollingIntervalTime); //长轮询接口报错次数达到一定值，每间隔5s发起新的长轮询\n                    }\n                }\n            };\n\n            //处理收到的普通C2C消息\n            var handlerOrdinaryAndTipC2cMsgs = function (eventType, C2cMsgArray) {\n                //处理c2c消息\n                var notifyInfo = [];\n                var msgInfos = [];\n                msgInfos = C2cMsgArray; //返回的消息列表\n                // MsgStore.cookie = resp.Cookie;//cookies，记录当前读到的最新消息位置\n\n                for (var i in msgInfos) {\n                    var msgInfo = msgInfos[i];\n                var isSendMsg, id;\n                var headUrl =  msgInfo.From_AccountHeadurl || '';\n                    if (msgInfo.From_Account == ctx.identifier) { //当前用户发送的消息\n                        isSendMsg = true;\n                        id = msgInfo.To_Account; //读取接收者信息\n                    } else { //当前用户收到的消息\n                        isSendMsg = false;\n                        id = msgInfo.From_Account; //读取发送者信息\n                    }\n                    var sess = MsgStore.sessByTypeId(SESSION_TYPE.C2C, id);\n                    if (!sess) {\n                        sess = new Session(SESSION_TYPE.C2C, id, id, headUrl, 0, 0);\n                    }\n                \tvar msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp, msgInfo.From_Account, C2C_MSG_SUB_TYPE.COMMON, msgInfo.From_AccountNick, headUrl);\n                    var msgBody = null;\n                    var msgContent = null;\n                    var msgType = null;\n                    for (var mi in msgInfo.MsgBody) {\n                        msgBody = msgInfo.MsgBody[mi];\n                        msgType = msgBody.MsgType;\n                        switch (msgType) {\n                            case MSG_ELEMENT_TYPE.TEXT:\n                                msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                                break;\n                            case MSG_ELEMENT_TYPE.FACE:\n                                msgContent = new Msg.Elem.Face(\n                                    msgBody.MsgContent.Index,\n                                    msgBody.MsgContent.Data\n                                );\n                                break;\n                            case MSG_ELEMENT_TYPE.IMAGE:\n                                msgContent = new Msg.Elem.Images(\n                                    msgBody.MsgContent.UUID,\n                                    msgBody.MsgContent.ImageFormat || \"\"\n                                );\n                                for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                    var tempImg = msgBody.MsgContent.ImageInfoArray[j];\n                                    msgContent.addImage(\n                                        new Msg.Elem.Images.Image(\n                                            tempImg.Type,\n                                            tempImg.Size,\n                                            tempImg.Width,\n                                            tempImg.Height,\n                                            tempImg.URL\n                                        )\n                                    );\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.SOUND:\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.Sound(\n                                        msgBody.MsgContent.UUID,\n                                        msgBody.MsgContent.Second,\n                                        msgBody.MsgContent.Size,\n                                        msgInfo.From_Account,\n                                        msgInfo.To_Account,\n                                        msgBody.MsgContent.Download_Flag,\n                                        SESSION_TYPE.C2C\n                                    );\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.LOCATION:\n                                msgContent = new Msg.Elem.Location(\n                                    msgBody.MsgContent.Longitude,\n                                    msgBody.MsgContent.Latitude,\n                                    msgBody.MsgContent.Desc\n                                );\n                                break;\n                            case MSG_ELEMENT_TYPE.FILE:\n                            case MSG_ELEMENT_TYPE.FILE + \" \":\n                                msgType = MSG_ELEMENT_TYPE.FILE;\n                                if (msgBody.MsgContent) {\n                                    msgContent = new Msg.Elem.File(\n                                        msgBody.MsgContent.UUID,\n                                        msgBody.MsgContent.FileName,\n                                        msgBody.MsgContent.FileSize,\n                                        msgInfo.From_Account,\n                                        msgInfo.To_Account,\n                                        msgBody.MsgContent.Download_Flag,\n                                        SESSION_TYPE.C2C\n                                    );\n                                } else {\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('[文件消息下载地址解析出错]');\n                                }\n                                break;\n                            case MSG_ELEMENT_TYPE.CUSTOM:\n                                try {\n                                    var data = JSON.parse(msgBody.MsgContent.Data);\n                                    if (data && data.userAction && data.userAction == FRIEND_WRITE_MSG_ACTION.ING) { //过滤安卓或ios的正在输入自定义消息\n                                        continue;\n                                    }\n                                } catch (e) {}\n\n                                msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                                msgContent = new Msg.Elem.Custom(\n                                    msgBody.MsgContent.Data,\n                                    msgBody.MsgContent.Desc,\n                                    msgBody.MsgContent.Ext\n                                );\n                                break;\n                            default:\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                                break;\n                        }\n                        msg.elems.push(new Msg.Elem(msgType, msgContent));\n                    }\n\n                    if (msg.elems.length > 0 && MsgStore.addMsg(msg, true)) {\n                        notifyInfo.push(msg);\n                    }\n                } // for loop\n                if (notifyInfo.length > 0)\n                    MsgStore.updateTimeline();\n                if (notifyInfo.length > 0) {\n                    if (onMsgCallback) onMsgCallback(notifyInfo);\n                }\n            };\n\n            //发起新的长轮询请求\n            var startNextLongPolling = function () {\n                longPollingOn && MsgManager.longPolling();\n            };\n\n            //处理未决的加群申请消息列表\n            var handlerApplyJoinGroupSystemMsgs = function (eventArray) {\n                for (var i in eventArray) {\n                    var e = eventArray[i];\n                    handlerGroupSystemMsgs(e.GroupTips, true);\n                    switch (e.Event) {\n                        case LONG_POLLINNG_EVENT_TYPE.GROUP_SYSTEM: //（多终端同步）群系统消息\n                            log.warn(\"handlerApplyJoinGroupSystemMsgs： handler new group system msg\");\n                            //true 表示 解决加群申请通知存在重复的问题（已处理的通知，下次登录还会拉到），需要判重\n                            handlerGroupSystemMsgs(e.GroupTips, true);\n                            break;\n                        default:\n                            log.error(\"syncMsgs收到未知的群系统消息类型: Event=\" + e.Event);\n                            break;\n                    }\n                }\n            };\n\n            //拉取c2c消息(包含加群未决消息，需要处理)\n            this.syncMsgs = function (cbOk, cbErr) {\n                var notifyInfo = [];\n                var msgInfos = [];\n                //读取C2C消息\n                proto_getMsgs(MsgStore.cookie, MsgStore.syncFlag, function (resp) {\n                    //拉取完毕\n                    if (resp.SyncFlag == 2) {\n                        MsgStore.syncFlag = 0;\n                    }\n                    //处理c2c消息\n                    msgInfos = resp.MsgList; //返回的消息列表\n                    MsgStore.cookie = resp.Cookie; //cookies，记录当前读到的最新消息位置\n\n                    for (var i in msgInfos) {\n                        var msgInfo = msgInfos[i];\n                        var isSendMsg, id, headUrl;\n                        if (msgInfo.From_Account == ctx.identifier) { //当前用户发送的消息\n                            isSendMsg = true;\n                            id = msgInfo.To_Account; //读取接收者信息\n                            headUrl = '';\n                        } else { //当前用户收到的消息\n                            isSendMsg = false;\n                            id = msgInfo.From_Account; //读取发送者信息\n                            headUrl = '';\n                        }\n                        var sess = MsgStore.sessByTypeId(SESSION_TYPE.C2C, id);\n                        if (!sess) {\n                            sess = new Session(SESSION_TYPE.C2C, id, id, headUrl, 0, 0);\n                        }\n                    var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp, msgInfo.From_Account, C2C_MSG_SUB_TYPE.COMMON, msgInfo.From_AccountNick, msgInfo.From_AccountHeadurl);\n                        var msgBody = null;\n                        var msgContent = null;\n                        var msgType = null;\n                        for (var mi in msgInfo.MsgBody) {\n                            msgBody = msgInfo.MsgBody[mi];\n                            msgType = msgBody.MsgType;\n                            switch (msgType) {\n                                case MSG_ELEMENT_TYPE.TEXT:\n                                    msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                                    break;\n                                case MSG_ELEMENT_TYPE.FACE:\n                                    msgContent = new Msg.Elem.Face(\n                                        msgBody.MsgContent.Index,\n                                        msgBody.MsgContent.Data\n                                    );\n                                    break;\n                                case MSG_ELEMENT_TYPE.IMAGE:\n                                    msgContent = new Msg.Elem.Images(\n                                        msgBody.MsgContent.UUID,\n                                        msgBody.MsgContent.ImageFormat\n                                    );\n                                    for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                        var tempImg = msgBody.MsgContent.ImageInfoArray[j];\n                                        msgContent.addImage(\n                                            new Msg.Elem.Images.Image(\n                                                tempImg.Type,\n                                                tempImg.Size,\n                                                tempImg.Width,\n                                                tempImg.Height,\n                                                tempImg.URL\n                                            )\n                                        );\n                                    }\n                                    break;\n                                case MSG_ELEMENT_TYPE.SOUND:\n                                    // var soundUrl = getSoundDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account);\n                                    if (msgBody.MsgContent) {\n                                        msgContent = new Msg.Elem.Sound(\n                                            msgBody.MsgContent.UUID,\n                                            msgBody.MsgContent.Second,\n                                            msgBody.MsgContent.Size,\n                                            msgInfo.From_Account,\n                                            msgInfo.To_Account,\n                                            msgBody.MsgContent.Download_Flag,\n                                            SESSION_TYPE.C2C\n                                        );\n                                    } else {\n                                        msgType = MSG_ELEMENT_TYPE.TEXT;\n                                        msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                                    }\n                                    break;\n                                case MSG_ELEMENT_TYPE.LOCATION:\n                                    msgContent = new Msg.Elem.Location(\n                                        msgBody.MsgContent.Longitude,\n                                        msgBody.MsgContent.Latitude,\n                                        msgBody.MsgContent.Desc\n                                    );\n                                    break;\n                                case MSG_ELEMENT_TYPE.FILE:\n                                case MSG_ELEMENT_TYPE.FILE + \" \":\n                                    msgType = MSG_ELEMENT_TYPE.FILE;\n                                    // var fileUrl = getFileDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account, msgBody.MsgContent.FileName);\n                                    if (msgBody.MsgContent) {\n                                        msgContent = new Msg.Elem.File(\n                                            msgBody.MsgContent.UUID,\n                                            msgBody.MsgContent.FileName,\n                                            msgBody.MsgContent.FileSize,\n                                            msgInfo.From_Account,\n                                            msgInfo.To_Account,\n                                            msgBody.MsgContent.Download_Flag,\n                                            SESSION_TYPE.C2C\n                                        );\n                                    } else {\n                                        msgType = MSG_ELEMENT_TYPE.TEXT;\n                                        msgContent = new Msg.Elem.Text('[文件消息下载地址解析出错]');\n                                    }\n                                    break;\n                                case MSG_ELEMENT_TYPE.CUSTOM:\n                                    try {\n                                        var data = JSON.parse(msgBody.MsgContent.Data);\n                                        if (data && data.userAction && data.userAction == FRIEND_WRITE_MSG_ACTION.ING) { //过滤安卓或ios的正在输入自定义消息\n                                            continue;\n                                        }\n                                    } catch (e) {}\n\n                                    msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                                    msgContent = new Msg.Elem.Custom(\n                                        msgBody.MsgContent.Data,\n                                        msgBody.MsgContent.Desc,\n                                        msgBody.MsgContent.Ext\n                                    );\n                                    break;\n                                default:\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                                    break;\n                            }\n                            msg.elems.push(new Msg.Elem(msgType, msgContent));\n                        }\n\n                        if (msg.elems.length > 0 && MsgStore.addMsg(msg, true)) {\n                            notifyInfo.push(msg);\n                        }\n                    } // for loop\n\n                    //处理加群未决申请消息\n                    handlerApplyJoinGroupSystemMsgs(resp.EventArray);\n\n                    if (notifyInfo.length > 0)\n                        MsgStore.updateTimeline();\n                    if (cbOk) cbOk(notifyInfo);\n                    else if (notifyInfo.length > 0) {\n                        if (onMsgCallback) onMsgCallback(notifyInfo);\n                    }\n\n                }, function (err) {\n                    log.error(\"getMsgs failed:\" + err.ErrorInfo);\n                    if (cbErr) cbErr(err);\n                });\n            };\n\n\n            //拉取C2C漫游消息\n            this.getC2CHistoryMsgs = function (options, cbOk, cbErr) {\n\n                if (!options.Peer_Account) {\n                    if (cbErr) {\n                        cbErr(tool.getReturnError(\"Peer_Account is empty\", -13));\n                        return;\n                    }\n                }\n                if (!options.MaxCnt) {\n                    options.MaxCnt = 15;\n                }\n                if (options.MaxCnt <= 0) {\n                    if (cbErr) {\n                        cbErr(tool.getReturnError(\"MaxCnt should be greater than 0\", -14));\n                        return;\n                    }\n                }\n                if (options.MaxCnt > 15) {\n                    if (cbErr) {\n                        cbErr(tool.getReturnError(\"MaxCnt can not be greater than 15\", -15));\n                        return;\n                    }\n                    return;\n                }\n                if (options.MsgKey == null || options.MsgKey === undefined) {\n                    options.MsgKey = '';\n                }\n                var opts = {\n                    'Peer_Account': options.Peer_Account,\n                    'MaxCnt': options.MaxCnt,\n                    'LastMsgTime': options.LastMsgTime,\n                    'MsgKey': options.MsgKey\n                };\n                //读取c2c漫游消息\n                proto_getC2CHistoryMsgs(opts, function (resp) {\n                    var msgObjList = [];\n                    var msgInfos = [];\n                    //处理c2c消息\n                    msgInfos = resp.MsgList; //返回的消息列表\n                    var sess = MsgStore.sessByTypeId(SESSION_TYPE.C2C, options.Peer_Account);\n                    if (!sess) {\n                        sess = new Session(SESSION_TYPE.C2C, options.Peer_Account, options.Peer_Account, '', 0, 0);\n                    }\n                    for (var i in msgInfos) {\n                        var msgInfo = msgInfos[i];\n                    var isSendMsg, id;\n                    var headUrl = msgInfo.From_AccountHeadurl || '';\n                        if (msgInfo.From_Account == ctx.identifier) { //当前用户发送的消息\n                            isSendMsg = true;\n                            id = msgInfo.To_Account; //读取接收者信息\n                        } else { //当前用户收到的消息\n                            isSendMsg = false;\n                            id = msgInfo.From_Account; //读取发送者信息\n                        }\n                    var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp, msgInfo.From_Account, C2C_MSG_SUB_TYPE.COMMON, msgInfo.From_AccountNick, headUrl);\n                        var msgBody = null;\n                        var msgContent = null;\n                        var msgType = null;\n                        for (var mi in msgInfo.MsgBody) {\n                            msgBody = msgInfo.MsgBody[mi];\n                            msgType = msgBody.MsgType;\n                            switch (msgType) {\n                                case MSG_ELEMENT_TYPE.TEXT:\n                                    msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                                    break;\n                                case MSG_ELEMENT_TYPE.FACE:\n                                    msgContent = new Msg.Elem.Face(\n                                        msgBody.MsgContent.Index,\n                                        msgBody.MsgContent.Data\n                                    );\n                                    break;\n                                case MSG_ELEMENT_TYPE.IMAGE:\n                                    msgContent = new Msg.Elem.Images(\n                                        msgBody.MsgContent.UUID,\n                                        msgBody.MsgContent.ImageFormat\n                                    );\n                                    for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                        var tempImg = msgBody.MsgContent.ImageInfoArray[j];\n                                        msgContent.addImage(\n                                            new Msg.Elem.Images.Image(\n                                                tempImg.Type,\n                                                tempImg.Size,\n                                                tempImg.Width,\n                                                tempImg.Height,\n                                                tempImg.URL\n                                            )\n                                        );\n                                    }\n                                    break;\n                                case MSG_ELEMENT_TYPE.SOUND:\n\n                                    // var soundUrl = getSoundDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account);\n\n                                    if (msgBody.MsgContent) {\n                                        msgContent = new Msg.Elem.Sound(\n                                            msgBody.MsgContent.UUID,\n                                            msgBody.MsgContent.Second,\n                                            msgBody.MsgContent.Size,\n                                            msgInfo.From_Account,\n                                            msgInfo.To_Account,\n                                            msgBody.MsgContent.Download_Flag,\n                                            SESSION_TYPE.C2C\n                                        );\n                                    } else {\n                                        msgType = MSG_ELEMENT_TYPE.TEXT;\n                                        msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                                    }\n                                    break;\n                                case MSG_ELEMENT_TYPE.LOCATION:\n                                    msgContent = new Msg.Elem.Location(\n                                        msgBody.MsgContent.Longitude,\n                                        msgBody.MsgContent.Latitude,\n                                        msgBody.MsgContent.Desc\n                                    );\n                                    break;\n                                case MSG_ELEMENT_TYPE.FILE:\n                                case MSG_ELEMENT_TYPE.FILE + \" \":\n                                    msgType = MSG_ELEMENT_TYPE.FILE;\n                                    // var fileUrl = getFileDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account, msgBody.MsgContent.FileName);\n\n                                    if (msgBody.MsgContent) {\n                                        msgContent = new Msg.Elem.File(\n                                            msgBody.MsgContent.UUID,\n                                            msgBody.MsgContent.FileName,\n                                            msgBody.MsgContent.FileSize,\n                                            msgInfo.From_Account,\n                                            msgInfo.To_Account,\n                                            msgBody.MsgContent.Download_Flag,\n                                            SESSION_TYPE.C2C\n                                        );\n                                    } else {\n                                        msgType = MSG_ELEMENT_TYPE.TEXT;\n                                        msgContent = new Msg.Elem.Text('[文件消息下载地址解析出错]');\n                                    }\n                                    break;\n                                case MSG_ELEMENT_TYPE.CUSTOM:\n                                    msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                                    msgContent = new Msg.Elem.Custom(\n                                        msgBody.MsgContent.Data,\n                                        msgBody.MsgContent.Desc,\n                                        msgBody.MsgContent.Ext\n                                    );\n\n                                    break;\n                                default:\n                                    msgType = MSG_ELEMENT_TYPE.TEXT;\n                                    msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                                    break;\n                            }\n                            msg.elems.push(new Msg.Elem(msgType, msgContent));\n                        }\n                        MsgStore.addMsg(msg);\n                        msgObjList.push(msg);\n                    } // for loop\n\n                    MsgStore.updateTimeline();\n                    if (cbOk) {\n\n                        var newResp = {\n                            'Complete': resp.Complete,\n                            'MsgCount': msgObjList.length,\n                            'LastMsgTime': resp.LastMsgTime,\n                            'MsgKey': resp.MsgKey,\n                            'MsgList': msgObjList\n                        };\n                        sess.isFinished(resp.Complete);\n                        cbOk(newResp);\n                    }\n\n                }, function (err) {\n                    log.error(\"getC2CHistoryMsgs failed:\" + err.ErrorInfo);\n                    if (cbErr) cbErr(err);\n                });\n            };\n\n            //拉群历史消息\n            //不传cbOk 和 cbErr，则会调用新消息回调函数\n            this.syncGroupMsgs = function (options, cbOk, cbErr) {\n                if (options.ReqMsgSeq <= 0) {\n                    if (cbErr) {\n                        var errInfo = \"ReqMsgSeq must be greater than 0\";\n                        var error = tool.getReturnError(errInfo, -16);\n                        cbErr(error);\n                    }\n                    return;\n                }\n                var opts = {\n                    'GroupId': options.GroupId,\n                    'ReqMsgSeq': options.ReqMsgSeq,\n                    'ReqMsgNumber': options.ReqMsgNumber\n                };\n                //读群漫游消息\n                proto_getGroupMsgs(opts, function (resp) {\n                    var notifyInfo = [];\n                    var group_id = resp.GroupId; //返回的群id\n                    var msgInfos = resp.RspMsgList; //返回的消息列表\n                    var isFinished = resp.IsFinished;\n\n                    if (msgInfos == null || msgInfos === undefined) {\n                        if (cbOk) {\n                            cbOk([]);\n                        }\n                        return;\n                    }\n                    for (var i = msgInfos.length - 1; i >= 0; i--) {\n                        var msgInfo = msgInfos[i];\n                        //如果是已经删除的消息或者发送者帐号为空或者消息内容为空\n                        //IsPlaceMsg=1\n                        if (msgInfo.IsPlaceMsg || !msgInfo.From_Account || !msgInfo.MsgBody || msgInfo.MsgBody.length == 0) {\n                            continue;\n                        }\n                        var msg = handlerGroupMsg(msgInfo, true, true, isFinished);\n                        if (msg) {\n                            notifyInfo.push(msg);\n                        }\n                    } // for loop\n                    if (notifyInfo.length > 0)\n                        MsgStore.updateTimeline();\n                    if (cbOk) cbOk(notifyInfo);\n                    else if (notifyInfo.length > 0) {\n                        if (onMsgCallback) onMsgCallback(notifyInfo);\n                    }\n\n                }, function (err) {\n                    log.error(\"getGroupMsgs failed:\" + err.ErrorInfo);\n                    if (cbErr) cbErr(err);\n                });\n            };\n\n            //处理群消息(普通消息+提示消息)\n            //isSyncGroupMsgs 是否主动拉取群消息标志\n            //isAddMsgFlag 是否需要保存到MsgStore，如果需要，这里会存在判重逻辑\n            var handlerGroupMsg = function (msgInfo, isSyncGroupMsgs, isAddMsgFlag, isFinished) {\n                if (msgInfo.IsPlaceMsg || !msgInfo.From_Account || !msgInfo.MsgBody || msgInfo.MsgBody.length == 0) {\n                    return null;\n                }\n                var isSendMsg, id, headUrl, fromAccountNick, fromAccountHeadurl;\n                var group_id = msgInfo.ToGroupId;\n                var group_name = group_id;\n                if (msgInfo.GroupInfo) { //取出群名称\n                    if (msgInfo.GroupInfo.GroupName) {\n                        group_name = msgInfo.GroupInfo.GroupName;\n                    }\n                }\n                //取出成员昵称\n                fromAccountNick = msgInfo.From_Account;\n                //fromAccountHeadurl = msgInfo.GroupInfo.From_AccountHeadurl;\n                if (msgInfo.GroupInfo) {\n                    if (msgInfo.GroupInfo.From_AccountNick) {\n                        fromAccountNick = msgInfo.GroupInfo.From_AccountNick;\n                    }\n                    if (msgInfo.GroupInfo.From_AccountHeadurl) {\n                        fromAccountHeadurl = msgInfo.GroupInfo.From_AccountHeadurl;\n                    } else {\n                        fromAccountHeadurl = null;\n                    }\n                }\n                if (msgInfo.From_Account == ctx.identifier) { //当前用户发送的消息\n                    isSendMsg = true;\n                    id = msgInfo.From_Account; //读取接收者信息\n                    headUrl = '';\n                } else { //当前用户收到的消息\n                    isSendMsg = false;\n                    id = msgInfo.From_Account; //读取发送者信息\n                    headUrl = '';\n                }\n                var sess = MsgStore.sessByTypeId(SESSION_TYPE.GROUP, group_id);\n                if (!sess) {\n                    sess = new Session(SESSION_TYPE.GROUP, group_id, group_name, headUrl, 0, 0);\n                }\n                if (typeof isFinished !== \"undefined\") {\n                    sess.isFinished(isFinished || 0);\n                }\n                var subType = GROUP_MSG_SUB_TYPE.COMMON; //消息类型\n                //群提示消息,重新封装下\n                if (LONG_POLLINNG_EVENT_TYPE.GROUP_TIP == msgInfo.Event || LONG_POLLINNG_EVENT_TYPE.GROUP_TIP2 == msgInfo.Event) {\n                    subType = GROUP_MSG_SUB_TYPE.TIP;\n                    var groupTip = msgInfo.MsgBody;\n                    msgInfo.MsgBody = [];\n                    msgInfo.MsgBody.push({\n                        \"MsgType\": MSG_ELEMENT_TYPE.GROUP_TIP,\n                        \"MsgContent\": groupTip\n                    });\n                } else if (msgInfo.MsgPriority) { //群点赞消息\n                    if (msgInfo.MsgPriority == GROUP_MSG_PRIORITY_TYPE.REDPACKET) {\n                        subType = GROUP_MSG_SUB_TYPE.REDPACKET;\n                    } else if (msgInfo.MsgPriority == GROUP_MSG_PRIORITY_TYPE.LOVEMSG) {\n                        subType = GROUP_MSG_SUB_TYPE.LOVEMSG;\n                    }\n\n                }\n                var msg = new Msg(sess, isSendMsg, msgInfo.MsgSeq, msgInfo.MsgRandom, msgInfo.MsgTimeStamp, msgInfo.From_Account, subType, fromAccountNick, fromAccountHeadurl);\n                var msgBody = null;\n                var msgContent = null;\n                var msgType = null;\n                for (var mi in msgInfo.MsgBody) {\n                    msgBody = msgInfo.MsgBody[mi];\n                    msgType = msgBody.MsgType;\n                    switch (msgType) {\n                        case MSG_ELEMENT_TYPE.TEXT:\n                            msgContent = new Msg.Elem.Text(msgBody.MsgContent.Text);\n                            break;\n                        case MSG_ELEMENT_TYPE.FACE:\n                            msgContent = new Msg.Elem.Face(\n                                msgBody.MsgContent.Index,\n                                msgBody.MsgContent.Data\n                            );\n                            break;\n                        case MSG_ELEMENT_TYPE.IMAGE:\n                            msgContent = new Msg.Elem.Images(\n                                msgBody.MsgContent.UUID,\n                                msgBody.MsgContent.ImageFormat || \"\"\n                            );\n                            for (var j in msgBody.MsgContent.ImageInfoArray) {\n                                msgContent.addImage(\n                                    new Msg.Elem.Images.Image(\n                                        msgBody.MsgContent.ImageInfoArray[j].Type,\n                                        msgBody.MsgContent.ImageInfoArray[j].Size,\n                                        msgBody.MsgContent.ImageInfoArray[j].Width,\n                                        msgBody.MsgContent.ImageInfoArray[j].Height,\n                                        msgBody.MsgContent.ImageInfoArray[j].URL\n                                    )\n                                );\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.SOUND:\n                            if (msgBody.MsgContent) {\n                                msgContent = new Msg.Elem.Sound(\n                                    msgBody.MsgContent.UUID,\n                                    msgBody.MsgContent.Second,\n                                    msgBody.MsgContent.Size,\n                                    msgInfo.From_Account,\n                                    msgInfo.To_Account,\n                                    msgBody.MsgContent.Download_Flag,\n                                    SESSION_TYPE.GROUP\n                                );\n                            } else {\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('[语音消息]下载地址解析出错');\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.LOCATION:\n                            msgContent = new Msg.Elem.Location(\n                                msgBody.MsgContent.Longitude,\n                                msgBody.MsgContent.Latitude,\n                                msgBody.MsgContent.Desc\n                            );\n                            break;\n                        case MSG_ELEMENT_TYPE.FILE:\n                        case MSG_ELEMENT_TYPE.FILE + \" \":\n                            msgType = MSG_ELEMENT_TYPE.FILE;\n                            var fileUrl = getFileDownUrl(msgBody.MsgContent.UUID, msgInfo.From_Account, msgBody.MsgContent.FileName);\n\n                            if (msgBody.MsgContent) {\n                                msgContent = new Msg.Elem.File(\n                                    msgBody.MsgContent.UUID,\n                                    msgBody.MsgContent.FileName,\n                                    msgBody.MsgContent.FileSize,\n                                    msgInfo.From_Account,\n                                    msgInfo.To_Account,\n                                    msgBody.MsgContent.Download_Flag,\n                                    SESSION_TYPE.GROUP\n                                );\n                            } else {\n                                msgType = MSG_ELEMENT_TYPE.TEXT;\n                                msgContent = new Msg.Elem.Text('[文件消息]地址解析出错');\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.GROUP_TIP:\n                            var opType = msgBody.MsgContent.OpType;\n                            msgContent = new Msg.Elem.GroupTip(\n                                opType,\n                                msgBody.MsgContent.Operator_Account,\n                                group_id,\n                                msgInfo.GroupInfo.GroupName,\n                                msgBody.MsgContent.List_Account,\n                                msgBody.MsgContent.MsgMemberExtraInfo\n                            );\n                            if (GROUP_TIP_TYPE.JOIN == opType || GROUP_TIP_TYPE.QUIT == opType) { //加群或退群时，设置最新群成员数\n                                msgContent.setGroupMemberNum(msgBody.MsgContent.MemberNum);\n                            } else if (GROUP_TIP_TYPE.MODIFY_GROUP_INFO == opType) { //群资料变更\n                                var tempIsCallbackFlag = false;\n                                var tempNewGroupInfo = {\n                                    \"GroupId\": group_id,\n                                    \"GroupFaceUrl\": null,\n                                    \"GroupName\": null,\n                                    \"OwnerAccount\": null,\n                                    \"GroupNotification\": null,\n                                    \"GroupIntroduction\": null\n                                };\n                                var msgGroupNewInfo = msgBody.MsgContent.MsgGroupNewInfo;\n                                if (msgGroupNewInfo.GroupFaceUrl) {\n                                    var tmpNGIFaceUrl = new Msg.Elem.GroupTip.GroupInfo(\n                                        GROUP_TIP_MODIFY_GROUP_INFO_TYPE.FACE_URL,\n                                        msgGroupNewInfo.GroupFaceUrl\n                                    );\n                                    msgContent.addGroupInfo(tmpNGIFaceUrl);\n                                    tempIsCallbackFlag = true;\n                                    tempNewGroupInfo.GroupFaceUrl = msgGroupNewInfo.GroupFaceUrl;\n                                }\n                                if (msgGroupNewInfo.GroupName) {\n                                    var tmpNGIName = new Msg.Elem.GroupTip.GroupInfo(\n                                        GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NAME,\n                                        msgGroupNewInfo.GroupName\n                                    );\n                                    msgContent.addGroupInfo(tmpNGIName);\n                                    tempIsCallbackFlag = true;\n                                    tempNewGroupInfo.GroupName = msgGroupNewInfo.GroupName;\n                                }\n                                if (msgGroupNewInfo.Owner_Account) {\n                                    var tmpNGIOwner = new Msg.Elem.GroupTip.GroupInfo(\n                                        GROUP_TIP_MODIFY_GROUP_INFO_TYPE.OWNER,\n                                        msgGroupNewInfo.Owner_Account\n                                    );\n                                    msgContent.addGroupInfo(tmpNGIOwner);\n                                    tempIsCallbackFlag = true;\n                                    tempNewGroupInfo.OwnerAccount = msgGroupNewInfo.Owner_Account;\n                                }\n                                if (msgGroupNewInfo.GroupNotification) {\n                                    var tmpNGINotification = new Msg.Elem.GroupTip.GroupInfo(\n                                        GROUP_TIP_MODIFY_GROUP_INFO_TYPE.NOTIFICATION,\n                                        msgGroupNewInfo.GroupNotification\n                                    );\n                                    msgContent.addGroupInfo(tmpNGINotification);\n                                    tempIsCallbackFlag = true;\n                                    tempNewGroupInfo.GroupNotification = msgGroupNewInfo.GroupNotification;\n                                }\n                                if (msgGroupNewInfo.GroupIntroduction) {\n                                    var tmpNGIIntroduction = new Msg.Elem.GroupTip.GroupInfo(\n                                        GROUP_TIP_MODIFY_GROUP_INFO_TYPE.INTRODUCTION,\n                                        msgGroupNewInfo.GroupIntroduction\n                                    );\n                                    msgContent.addGroupInfo(tmpNGIIntroduction);\n                                    tempIsCallbackFlag = true;\n                                    tempNewGroupInfo.GroupIntroduction = msgGroupNewInfo.GroupIntroduction;\n                                }\n\n                                //回调群资料变化通知方法\n                                if (isSyncGroupMsgs == false && tempIsCallbackFlag && onGroupInfoChangeCallback) {\n                                    onGroupInfoChangeCallback(tempNewGroupInfo);\n                                }\n\n                            } else if (GROUP_TIP_TYPE.MODIFY_MEMBER_INFO == opType) { //群成员变更\n                                var memberInfos = msgBody.MsgContent.MsgMemberInfo;\n                                for (var n in memberInfos) {\n                                    var memberInfo = memberInfos[n];\n                                    msgContent.addMemberInfo(\n                                        new Msg.Elem.GroupTip.MemberInfo(\n                                            memberInfo.User_Account, memberInfo.ShutupTime\n                                        )\n                                    );\n                                }\n                            }\n                            break;\n                        case MSG_ELEMENT_TYPE.CUSTOM:\n                            msgType = MSG_ELEMENT_TYPE.CUSTOM;\n                            msgContent = new Msg.Elem.Custom(\n                                msgBody.MsgContent.Data,\n                                msgBody.MsgContent.Desc,\n                                msgBody.MsgContent.Ext\n                            );\n                            break;\n                        default:\n                            msgType = MSG_ELEMENT_TYPE.TEXT;\n                            msgContent = new Msg.Elem.Text('web端暂不支持' + msgBody.MsgType + '消息');\n                            break;\n                    }\n                    msg.elems.push(new Msg.Elem(msgType, msgContent));\n                }\n\n                if (isAddMsgFlag == false) { //不需要保存消息\n                    return msg;\n                }\n\n                if (MsgStore.addMsg(msg, true)) {\n                    msg.extraInfo = msgInfo.GroupInfo.MsgFrom_AccountExtraInfo\n                    return msg;\n                } else {\n                    return null;\n                }\n            };\n\n            //初始化\n            this.init = function (listeners, cbOk, cbErr) {\n                if (!listeners.onMsgNotify) {\n                    log.warn('listeners.onMsgNotify is empty');\n                }\n                onMsgCallback = listeners.onMsgNotify;\n\n                if (listeners.onBigGroupMsgNotify) {\n                    onBigGroupMsgCallback = listeners.onBigGroupMsgNotify;\n                } else {\n                    log.warn('listeners.onBigGroupMsgNotify is empty');\n                }\n\n                if (listeners.onC2cEventNotifys) {\n                    onC2cEventCallbacks = listeners.onC2cEventNotifys;\n                } else {\n                    log.warn('listeners.onC2cEventNotifys is empty');\n                }\n                if (listeners.onGroupSystemNotifys) {\n                    onGroupSystemNotifyCallbacks = listeners.onGroupSystemNotifys;\n                } else {\n                    log.warn('listeners.onGroupSystemNotifys is empty');\n                }\n                if (listeners.onGroupInfoChangeNotify) {\n                    onGroupInfoChangeCallback = listeners.onGroupInfoChangeNotify;\n                } else {\n                    log.warn('listeners.onGroupInfoChangeNotify is empty');\n                }\n                if (listeners.onFriendSystemNotifys) {\n                    onFriendSystemNotifyCallbacks = listeners.onFriendSystemNotifys;\n                } else {\n                    log.warn('listeners.onFriendSystemNotifys is empty');\n                }\n                if (listeners.onProfileSystemNotifys) {\n                    onProfileSystemNotifyCallbacks = listeners.onProfileSystemNotifys;\n                } else {\n                    log.warn('listeners.onProfileSystemNotifys is empty');\n                }\n                if (listeners.onKickedEventCall) {\n                    onKickedEventCall = listeners.onKickedEventCall;\n                } else {\n                    log.warn('listeners.onKickedEventCall is empty');\n                }\n\t    if (listeners.onLongPullingNotify) {\n\t        onLongPullingNotify = listeners.onLongPullingNotify;\n            } else {\n                log.warn('listeners.onKickedEventCall is empty');\n            }\n\n                if (listeners.onAppliedDownloadUrl) {\n                    onAppliedDownloadUrl = listeners.onAppliedDownloadUrl;\n                } else {\n                    log.warn('listeners.onAppliedDownloadUrl is empty');\n                }\n\n                if (!ctx.identifier || !ctx.userSig) {\n                    if (cbOk) {\n                        var success = {\n                            'ActionStatus': ACTION_STATUS.OK,\n                            'ErrorCode': 0,\n                            'ErrorInfo': \"login success(no login state)\"\n                        };\n                        cbOk(success);\n                    }\n                    return;\n                }\n\n                //初始化\n                initMyGroupMaxSeqs(\n                    function (resp) {\n                        log.info('initMyGroupMaxSeqs success');\n                        //初始化文件\n                        initIpAndAuthkey(\n                            function (initIpAndAuthkeyResp) {\n                                log.info('initIpAndAuthkey success');\n                                if (cbOk) {\n                                    log.info('login success(have login state))');\n                                    var success = {\n                                        'ActionStatus': ACTION_STATUS.OK,\n                                        'ErrorCode': 0,\n                                        'ErrorInfo': \"login success\"\n                                    };\n                                    cbOk(success);\n                                }\n                                MsgManager.setLongPollingOn(true); //开启长轮询\n                                longPollingOn && MsgManager.longPolling(cbOk);\n                            }, cbErr);\n                    }, cbErr);\n            };\n\n            //发消息（私聊或群聊）\n            this.sendMsg = function (msg, cbOk, cbErr) {\n                proto_sendMsg(msg, function (resp) {\n                    //私聊时，加入自己的发的消息，群聊时，由于seq和服务器的seq不一样，所以不作处理\n                    if (msg.sess.type() == SESSION_TYPE.C2C) {\n                        if (!MsgStore.addMsg(msg)) {\n                            var errInfo = \"sendMsg: addMsg failed!\";\n                            var error = tool.getReturnError(errInfo, -17);\n                            log.error(errInfo);\n                            if (cbErr) cbErr(error);\n                            return;\n                        }\n                        //更新信息流时间\n                        MsgStore.updateTimeline();\n                    }\n                    if (cbOk) cbOk(resp);\n                }, function (err) {\n                    if (cbErr) cbErr(err);\n                });\n            };\n        };\n\n        //上传文件\n        var FileUploader = new function () {\n            this.fileMd5 = null;\n            //获取文件MD5\n            var getFileMD5 = function (file, cbOk, cbErr) {\n\n                //FileReader pc浏览器兼容性\n                //Feature   Firefox (Gecko) Chrome  Internet Explorer   Opera   Safari\n                //Basic support 3.6 7   10                      12.02   6.0.2\n                var fileReader = null;\n                try {\n                    fileReader = new FileReader(); //分块读取文件对象\n                } catch (e) {\n                    if (cbErr) {\n                        cbErr(tool.getReturnError('当前浏览器不支持FileReader', -18));\n                        return;\n                    }\n                }\n                //file的slice方法，注意它的兼容性，在不同浏览器的写法不同\n                var blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice;\n                if (!blobSlice) {\n                    if (cbErr) {\n                        cbErr(tool.getReturnError('当前浏览器不支持FileAPI', -19));\n                        return;\n                    }\n                }\n\n                var chunkSize = 2 * 1024 * 1024; //分块大小，2M\n                var chunks = Math.ceil(file.size / chunkSize); //总块数\n                var currentChunk = 0; //当前块数\n                var spark = new SparkMD5(); //获取MD5对象\n\n                fileReader.onload = function (e) { //数据加载完毕事件\n\n                    var binaryStr = \"\";\n                    var bytes = new Uint8Array(e.target.result);\n                    var length = bytes.byteLength;\n                    for (var i = 0; i < length; i++) {\n                        binaryStr += String.fromCharCode(bytes[i]); //二进制转换字符串\n                    }\n                    spark.appendBinary(binaryStr);\n                    currentChunk++;\n                    if (currentChunk < chunks) {\n                        loadNext(); //读取下一块数据\n                    } else {\n                        this.fileMd5 = spark.end(); //得到文件MD5值\n                        if (cbOk) {\n                            cbOk(this.fileMd5);\n                        }\n                    }\n                };\n                //分片读取文件\n\n                function loadNext() {\n                    var start = currentChunk * chunkSize,\n                        end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n                    //根据开始和结束位置，切割文件\n                    var b = blobSlice.call(file, start, end);\n                    //readAsBinaryString ie浏览器不兼容此方法\n                    //fileReader.readAsBinaryString(blobSlice.call(file, start, end));\n                    fileReader.readAsArrayBuffer(b); //ie，chrome，firefox等主流浏览器兼容此方法\n\n                }\n\n                loadNext(); //开始读取\n            };\n            //上传图片或文件(用于高版本浏览器，支持FileAPI)\n            this.uploadFile = function (options, cbOk, cbErr) {\n\n                var file_upload = {\n                    //初始化\n                    init: function (options, cbOk, cbErr) {\n                        var me = this;\n                        me.file = options.file;\n                        //分片上传进度回调事件\n                        me.onProgressCallBack = options.onProgressCallBack;\n                        //停止上传图片按钮\n                        if (options.abortButton) {\n                            options.abortButton.onclick = me.abortHandler;\n                        }\n                        me.total = me.file.size; //文件总大小\n                        me.loaded = 0; //已读取字节数\n                        me.step = 1080 * 1024; //分块大小，1080K\n                        me.sliceSize = 0; //分片大小\n                        me.sliceOffset = 0; //当前分片位置\n                        me.timestamp = unixtime(); //当前时间戳\n                        me.seq = nextSeq(); //请求seq\n                        me.random = createRandom(); //请求随机数\n                        me.fromAccount = ctx.identifier; //发送者\n                        me.toAccount = options.To_Account; //接收者\n                        me.fileMd5 = options.fileMd5; //文件MD5\n                        me.businessType = options.businessType; //图片或文件的业务类型，群消息:1; c2c消息:2; 个人头像：3; 群头像：4;\n                        me.fileType = options.fileType; //文件类型，不填为默认认为上传的是图片；1：图片；2：文件；3：短视频；4：PTT\n\n                        me.cbOk = cbOk; //上传成功回调事件\n                        me.cbErr = cbErr; //上传失败回调事件\n\n                        me.reader = new FileReader(); //读取文件对象\n                        me.blobSlice = File.prototype.mozSlice || File.prototype.webkitSlice || File.prototype.slice; //file的slice方法,不同浏览器不一样\n\n                        me.reader.onloadstart = me.onLoadStart; //开始读取回调事件\n                        me.reader.onprogress = me.onProgress; //读取文件进度回调事件\n                        me.reader.onabort = me.onAbort; //停止读取回调事件\n                        me.reader.onerror = me.onerror; //读取发生错误回调事件\n                        me.reader.onload = me.onLoad; //分片加载完毕回调事件\n                        me.reader.onloadend = me.onLoadEnd; //读取文件完毕回调事件\n                    },\n                    //上传方法\n                    upload: function () {\n                        var me = file_upload;\n                        //读取第一块\n                        me.readBlob(0);\n                    },\n                    onLoadStart: function () {\n                        var me = file_upload;\n                    },\n                    onProgress: function (e) {\n                        var me = file_upload;\n                        me.loaded += e.loaded;\n                        if (me.onProgressCallBack) {\n                            me.onProgressCallBack(me.loaded, me.total);\n                        }\n                    },\n                    onAbort: function () {\n                        var me = file_upload;\n                    },\n                    onError: function () {\n                        var me = file_upload;\n                    },\n                    onLoad: function (e) {\n                        var me = file_upload;\n                        if (e.target.readyState == FileReader.DONE) {\n                            var slice_data_base64 = e.target.result;\n                            //注意，一定要去除base64编码头部\n                            var pos = slice_data_base64.indexOf(\",\");\n                            if (pos != -1) {\n                                slice_data_base64 = slice_data_base64.substr(pos + 1);\n                            }\n                            //封装上传图片接口的请求参数\n                            var opt = {\n                                'From_Account': me.fromAccount,\n                                'To_Account': me.toAccount,\n                                'Busi_Id': me.businessType,\n                                'File_Type': me.fileType,\n                                'File_Str_Md5': me.fileMd5,\n                                'PkgFlag': UPLOAD_RES_PKG_FLAG.BASE64_DATA,\n                                'File_Size': me.total,\n                                'Slice_Offset': me.sliceOffset,\n                                'Slice_Size': me.sliceSize,\n                                'Slice_Data': slice_data_base64,\n                                'Seq': me.seq,\n                                'Timestamp': me.timestamp,\n                                'Random': me.random\n                            };\n\n                            //上传成功的成功回调\n                            var succCallback = function (resp) {\n                                if (resp.IsFinish == 0) {\n                                    me.loaded = resp.Next_Offset;\n                                    if (me.loaded < me.total) {\n                                        me.readBlob(me.loaded);\n                                    } else {\n                                        me.loaded = me.total;\n                                    }\n                                } else {\n\n                                    if (me.cbOk) {\n                                        var tempResp = {\n                                            'ActionStatus': resp.ActionStatus,\n                                            'ErrorCode': resp.ErrorCode,\n                                            'ErrorInfo': resp.ErrorInfo,\n                                            'File_UUID': resp.File_UUID,\n                                            'File_Size': resp.Next_Offset,\n                                            'URL_INFO': resp.URL_INFO,\n                                            'Download_Flag': resp.Download_Flag\n                                        };\n                                        if (me.fileType == UPLOAD_RES_TYPE.FILE) { //如果上传的是文件，下载地址需要sdk内部拼接\n                                            tempResp.URL_INFO = getFileDownUrl(resp.File_UUID, ctx.identifier, me.file.name);\n                                        }\n                                        me.cbOk(tempResp);\n                                    }\n                                }\n                                Upload_Retry_Times = 0;\n                            };\n                            //上传失败的回调\n                            var errorCallback = function (resp) {\n                                if (Upload_Retry_Times < Upload_Retry_Max_Times) {\n                                    Upload_Retry_Times++;\n                                    setTimeout(function () {\n                                        proto_uploadPic(opt, succCallback, errorCallback);\n                                    }, 1000);\n                                } else {\n                                    me.cbErr(resp);\n                                }\n                                //me.cbErr\n                            };\n                            //分片上传图片接口\n                            proto_uploadPic(opt, succCallback, errorCallback);\n                        }\n                    },\n                    onLoadEnd: function () {\n                        var me = file_upload;\n                    },\n                    //分片读取文件方法\n                    readBlob: function (start) {\n                        var me = file_upload;\n                        var blob, file = me.file;\n                        var end = start + me.step;\n                        if (end > me.total) {\n                            end = me.total;\n                            me.sliceSize = end - start;\n                        } else {\n                            me.sliceSize = me.step;\n                        }\n                        me.sliceOffset = start;\n                        //根据起始和结束位置，分片读取文件\n                        blob = me.blobSlice.call(file, start, end);\n                        //将分片的二进制数据转换为base64编码\n                        me.reader.readAsDataURL(blob);\n                    },\n                    abortHandler: function () {\n                        var me = file_upload;\n                        if (me.reader) {\n                            me.reader.abort();\n                        }\n                    }\n                };\n\n                //读取文件MD5\n                getFileMD5(options.file,\n                    function (fileMd5) {\n                        log.info('fileMd5: ' + fileMd5);\n                        options.fileMd5 = fileMd5;\n                        //初始化上传参数\n                        file_upload.init(options, cbOk, cbErr);\n                        //开始上传文件\n                        file_upload.upload();\n                    },\n                    cbErr\n                );\n            };\n        };\n\n\n        //web im 基础对象\n\n        //常量对象\n\n        //会话类型\n        webim.SESSION_TYPE = SESSION_TYPE;\n\n        webim.MSG_MAX_LENGTH = MSG_MAX_LENGTH;\n\n        //c2c消息子类型\n        webim.C2C_MSG_SUB_TYPE = C2C_MSG_SUB_TYPE;\n\n        //群消息子类型\n        webim.GROUP_MSG_SUB_TYPE = GROUP_MSG_SUB_TYPE;\n\n        //消息元素类型\n        webim.MSG_ELEMENT_TYPE = MSG_ELEMENT_TYPE;\n\n        //群提示消息类型\n        webim.GROUP_TIP_TYPE = GROUP_TIP_TYPE;\n\n        //图片类型\n        webim.IMAGE_TYPE = IMAGE_TYPE;\n\n        //群系统消息类型\n        webim.GROUP_SYSTEM_TYPE = GROUP_SYSTEM_TYPE;\n\n        //好友系统通知子类型\n        webim.FRIEND_NOTICE_TYPE = FRIEND_NOTICE_TYPE;\n\n        //群提示消息-群资料变更类型\n        webim.GROUP_TIP_MODIFY_GROUP_INFO_TYPE = GROUP_TIP_MODIFY_GROUP_INFO_TYPE;\n\n        //浏览器信息\n        webim.BROWSER_INFO = BROWSER_INFO;\n\n        //表情对象\n        webim.Emotions = webim.EmotionPicData = emotions;\n        //表情标识符和index Map\n        webim.EmotionDataIndexs = webim.EmotionPicDataIndex = emotionDataIndexs;\n\n        //腾讯登录服务错误码(托管模式)\n        webim.TLS_ERROR_CODE = TLS_ERROR_CODE;\n\n        //连接状态\n        webim.CONNECTION_STATUS = CONNECTION_STATUS;\n\n        //上传图片业务类型\n        webim.UPLOAD_PIC_BUSSINESS_TYPE = UPLOAD_PIC_BUSSINESS_TYPE;\n\n        //最近联系人类型\n        webim.RECENT_CONTACT_TYPE = RECENT_CONTACT_TYPE;\n\n        //上传资源类型\n        webim.UPLOAD_RES_TYPE = UPLOAD_RES_TYPE;\n\n\n        /**************************************/\n\n        //类对象\n        //\n        //工具对象\n        webim.Tool = tool;\n        //控制台打印日志对象\n        webim.Log = log;\n\n        //消息对象\n        webim.Msg = Msg;\n        //会话对象\n        webim.Session = Session;\n        //会话存储对象\n        webim.MsgStore = {\n            sessMap: function () {\n                return MsgStore.sessMap();\n            },\n            sessCount: function () {\n                return MsgStore.sessCount();\n            },\n            sessByTypeId: function (type, id) {\n                return MsgStore.sessByTypeId(type, id);\n            },\n            delSessByTypeId: function (type, id) {\n                return MsgStore.delSessByTypeId(type, id);\n            },\n            resetCookieAndSyncFlag: function () {\n                return MsgStore.resetCookieAndSyncFlag();\n            }\n        };\n\n        webim.Resources = Resources;\n\n        /**************************************/\n\n        // webim API impl\n        //\n        //基本接口\n        //登录\n        webim.login = webim.init = function (loginInfo, listeners, opts, cbOk, cbErr) {\n\n            //初始化连接状态回调函数\n            ConnManager.init(listeners.onConnNotify, cbOk, cbErr);\n\n            //登录\n            _login(loginInfo, listeners, opts, cbOk, cbErr);\n        };\n        //登出\n        //需要传长轮询id\n        //这样登出之后其他的登录实例还可以继续收取消息\n        webim.logout = webim.offline = function (cbOk, cbErr) {\n            return proto_logout('instance', cbOk, cbErr);\n        };\n\n        //登出\n        //这种登出方式，所有的实例都将不会收到消息推送，直到重新登录\n        webim.logoutAll = function (cbOk, cbErr) {\n            return proto_logout('all', cbOk, cbErr);\n        };\n\n\n        //消息管理接口\n        //发消息接口（私聊和群聊）\n        webim.sendMsg = function (msg, cbOk, cbErr) {\n            return MsgManager.sendMsg(msg, cbOk, cbErr);\n        };\n        //拉取未读c2c消息\n        webim.syncMsgs = function (cbOk, cbErr) {\n            return MsgManager.syncMsgs(cbOk, cbErr);\n        };\n        //拉取C2C漫游消息\n        webim.getC2CHistoryMsgs = function (options, cbOk, cbErr) {\n            return MsgManager.getC2CHistoryMsgs(options, cbOk, cbErr);\n        };\n        //拉取群漫游消息\n        webim.syncGroupMsgs = function (options, cbOk, cbErr) {\n            return MsgManager.syncGroupMsgs(options, cbOk, cbErr);\n        };\n\n        //上报c2c消息已读\n        webim.c2CMsgReaded = function (options, cbOk, cbErr) {\n            return MsgStore.c2CMsgReaded(options, cbOk, cbErr);\n        };\n\n        //上报群消息已读\n        webim.groupMsgReaded = function (options, cbOk, cbErr) {\n            return proto_groupMsgReaded(options, cbOk, cbErr);\n        };\n\n        //设置聊天会话自动标记已读\n        webim.setAutoRead = function (selSess, isOn, isResetAll) {\n            return MsgStore.setAutoRead(selSess, isOn, isResetAll);\n        };\n\n        //群组管理接口\n        //\n        //创建群\n        webim.createGroup = function (options, cbOk, cbErr) {\n            return proto_createGroup(options, cbOk, cbErr);\n        };\n        //创建群-高级接口\n        webim.createGroupHigh = function (options, cbOk, cbErr) {\n            return proto_createGroupHigh(options, cbOk, cbErr);\n        };\n        //申请加群\n        webim.applyJoinGroup = function (options, cbOk, cbErr) {\n            return proto_applyJoinGroup(options, cbOk, cbErr);\n        };\n        //处理加群申请(同意或拒绝)\n        webim.handleApplyJoinGroupPendency = function (options, cbOk, cbErr) {\n            return proto_handleApplyJoinGroupPendency(options, cbOk, cbErr);\n        };\n\n        //获取群组未决列表\n        webim.getPendencyGroup = function (options, cbOk, cbErr) {\n            return proto_getPendencyGroup(options, cbOk, cbErr);\n        };\n\n        //群未决已读上报\n        webim.getPendencyGroupRead = function (options, cbOk, cbErr) {\n            return proto_getPendencyGroupRead(options, cbOk, cbErr);\n        };\n\n        //处理邀请进群申请(同意或拒绝)\n        webim.handleInviteJoinGroupRequest = function (options, cbOk, cbErr) {\n            return proto_handleInviteJoinGroupRequest(options, cbOk, cbErr);\n        };\n\n        //删除加群申请\n        webim.deleteApplyJoinGroupPendency = function (options, cbOk, cbErr) {\n            return proto_deleteC2CMsg(options, cbOk, cbErr);\n        };\n\n        //主动退群\n        webim.quitGroup = function (options, cbOk, cbErr) {\n            return proto_quitGroup(options, cbOk, cbErr);\n        };\n        //搜索群组(根据名称)\n        webim.searchGroupByName = function (options, cbOk, cbErr) {\n            return proto_searchGroupByName(options, cbOk, cbErr);\n        };\n        //获取群组公开资料(根据群id搜索)\n        webim.getGroupPublicInfo = function (options, cbOk, cbErr) {\n            return proto_getGroupPublicInfo(options, cbOk, cbErr);\n        };\n        //获取群组详细资料-高级接口\n        webim.getGroupInfo = function (options, cbOk, cbErr) {\n            return proto_getGroupInfo(options, cbOk, cbErr);\n        };\n        //修改群基本资料\n        webim.modifyGroupBaseInfo = function (options, cbOk, cbErr) {\n            return proto_modifyGroupBaseInfo(options, cbOk, cbErr);\n        };\n        //获取群成员列表\n        webim.getGroupMemberInfo = function (options, cbOk, cbErr) {\n            return proto_getGroupMemberInfo(options, cbOk, cbErr);\n        };\n        //邀请好友加群\n        webim.addGroupMember = function (options, cbOk, cbErr) {\n            return proto_addGroupMember(options, cbOk, cbErr);\n        };\n        //修改群成员资料\n        webim.modifyGroupMember = function (options, cbOk, cbErr) {\n            return proto_modifyGroupMember(options, cbOk, cbErr);\n        };\n        //删除群成员\n        webim.deleteGroupMember = function (options, cbOk, cbErr) {\n            return proto_deleteGroupMember(options, cbOk, cbErr);\n        };\n        //解散群\n        webim.destroyGroup = function (options, cbOk, cbErr) {\n            return proto_destroyGroup(options, cbOk, cbErr);\n        };\n        //转让群组\n        webim.changeGroupOwner = function (options, cbOk, cbErr) {\n            return proto_changeGroupOwner(options, cbOk, cbErr);\n        };\n\n        //获取我的群组列表-高级接口\n        webim.getJoinedGroupListHigh = function (options, cbOk, cbErr) {\n            return proto_getJoinedGroupListHigh(options, cbOk, cbErr);\n        };\n        //获取群成员角色\n        webim.getRoleInGroup = function (options, cbOk, cbErr) {\n            return proto_getRoleInGroup(options, cbOk, cbErr);\n        };\n        //设置群成员禁言时间\n        webim.forbidSendMsg = function (options, cbOk, cbErr) {\n            return proto_forbidSendMsg(options, cbOk, cbErr);\n        };\n        //发送自定义群系统通知\n        webim.sendCustomGroupNotify = function (options, cbOk, cbErr) {\n            return proto_sendCustomGroupNotify(options, cbOk, cbErr);\n        };\n\n        //进入大群\n        webim.applyJoinBigGroup = function (options, cbOk, cbErr) {\n            return proto_applyJoinBigGroup(options, cbOk, cbErr);\n        };\n        //退出大群\n        webim.quitBigGroup = function (options, cbOk, cbErr) {\n            return proto_quitBigGroup(options, cbOk, cbErr);\n        };\n\n        //资料关系链管理接口\n        //\n        //获取个人资料接口，可用于搜索用户\n        webim.getProfilePortrait = function (options, cbOk, cbErr) {\n            return proto_getProfilePortrait(options, cbOk, cbErr);\n        };\n        //设置个人资料\n        webim.setProfilePortrait = function (options, cbOk, cbErr) {\n            return proto_setProfilePortrait(options, cbOk, cbErr);\n        };\n        //申请加好友\n        webim.applyAddFriend = function (options, cbOk, cbErr) {\n            return proto_applyAddFriend(options, cbOk, cbErr);\n        };\n        //获取好友申请列表\n        webim.getPendency = function (options, cbOk, cbErr) {\n            return proto_getPendency(options, cbOk, cbErr);\n        };\n        //好友申请列表已读上报\n        webim.getPendencyReport = function (options, cbOk, cbErr) {\n            return proto_getPendencyReport(options, cbOk, cbErr);\n        };\n        //删除好友申请\n        webim.deletePendency = function (options, cbOk, cbErr) {\n            return proto_deletePendency(options, cbOk, cbErr);\n        };\n        //处理好友申请\n        webim.responseFriend = function (options, cbOk, cbErr) {\n            return proto_responseFriend(options, cbOk, cbErr);\n        };\n        //获取我的好友\n        webim.getAllFriend = function (options, cbOk, cbErr) {\n            return proto_getAllFriend(options, cbOk, cbErr);\n        };\n        //删除会话\n        webim.deleteChat = function (options, cbOk, cbErr) {\n            return proto_deleteChat(options, cbOk, cbErr);\n        };\n        //删除好友\n        webim.deleteFriend = function (options, cbOk, cbErr) {\n            return proto_deleteFriend(options, cbOk, cbErr);\n        };\n        //拉黑\n        webim.addBlackList = function (options, cbOk, cbErr) {\n            return proto_addBlackList(options, cbOk, cbErr);\n        };\n        //删除黑名单\n        webim.deleteBlackList = function (options, cbOk, cbErr) {\n            return proto_deleteBlackList(options, cbOk, cbErr);\n        };\n        //获取我的黑名单\n        webim.getBlackList = function (options, cbOk, cbErr) {\n            return proto_getBlackList(options, cbOk, cbErr);\n        };\n\n        //获取最近会话\n        webim.getRecentContactList = function (options, cbOk, cbErr) {\n            return proto_getRecentContactList(options, cbOk, cbErr);\n        };\n\n        //图片或文件服务接口\n        //\n        //上传文件接口（高版本浏览器）\n        webim.uploadFile = webim.uploadPic = function (options, cbOk, cbErr) {\n            return FileUploader.uploadFile(options, cbOk, cbErr);\n        };\n        //提交上传图片表单接口（用于低版本ie）\n        webim.submitUploadFileForm = function (options, cbOk, cbErr) {\n            return FileUploader.submitUploadFileForm(options, cbOk, cbErr);\n        };\n        //上传图片或文件(Base64)接口\n        webim.uploadFileByBase64 = webim.uploadPicByBase64 = function (options, cbOk, cbErr) {\n            //请求参数\n            var opt = {\n                'To_Account': options.toAccount,\n                'Busi_Id': options.businessType,\n                'File_Type': options.File_Type,\n                'File_Str_Md5': options.fileMd5,\n                'PkgFlag': UPLOAD_RES_PKG_FLAG.BASE64_DATA,\n                'File_Size': options.totalSize,\n                'Slice_Offset': 0,\n                'Slice_Size': options.totalSize,\n                'Slice_Data': options.base64Str,\n                'Seq': nextSeq(),\n                'Timestamp': unixtime(),\n                'Random': createRandom()\n            };\n            return proto_uploadPic(opt, cbOk, cbErr);\n        };\n\n\n        //获取长轮询ID\n        webim.getLongPollingId = function (options, cbOk, cbErr) {\n            return proto_getLongPollingId(options, cbOk, cbErr);\n        };\n\n        //获取下载地址\n        webim.applyDownload = function (options, cbOk, cbErr) {\n            return proto_applyDownload(options, cbOk, cbErr);\n        };\n\n\n        //检查是否登录\n        webim.checkLogin = function (cbErr, isNeedCallBack) {\n            return checkLogin(cbErr, isNeedCallBack);\n        };\n    })(webim);\n    return webim;\n}();\n\n//# sourceURL=webpack:///./webim_wx.js?");

/***/ })

/******/ });